diff a/backend/src/cache/client/pod_fake.go b/backend/src/cache/client/pod_fake.go	(rejected hunks)
@@ -15,6 +15,7 @@
 package client
 
 import (
+	"context"
 	"errors"
 
 	"github.com/golang/glog"
@@ -31,51 +32,51 @@ type FakePodClient struct {
 	patchIsCalled bool
 }
 
-func (FakePodClient) GetEphemeralContainers(string, v1.GetOptions) (*corev1.EphemeralContainers, error) {
+func (FakePodClient) GetEphemeralContainers(context.Context, string, v1.GetOptions) (*corev1.EphemeralContainers, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) UpdateEphemeralContainers(string, *corev1.EphemeralContainers) (*corev1.EphemeralContainers, error) {
+func (FakePodClient) UpdateEphemeralContainers(context.Context, string, *corev1.EphemeralContainers, v1.UpdateOptions) (*corev1.EphemeralContainers, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) Create(*corev1.Pod) (*corev1.Pod, error) {
+func (FakePodClient) Create(context.Context, *corev1.Pod, v1.CreateOptions) (*corev1.Pod, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) Update(*corev1.Pod) (*corev1.Pod, error) {
+func (FakePodClient) Update(context.Context, *corev1.Pod, v1.UpdateOptions) (*corev1.Pod, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) UpdateStatus(*corev1.Pod) (*corev1.Pod, error) {
+func (FakePodClient) UpdateStatus(context.Context, *corev1.Pod, v1.UpdateOptions) (*corev1.Pod, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) Delete(name string, options *v1.DeleteOptions) error {
+func (FakePodClient) Delete(ctx context.Context, name string, options v1.DeleteOptions) error {
 	return nil
 }
 
-func (FakePodClient) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
+func (FakePodClient) DeleteCollection(ctx context.Context, options v1.DeleteOptions, listOptions v1.ListOptions) error {
 	glog.Error("This fake method is not yet implemented.")
 	return nil
 }
 
-func (FakePodClient) Get(name string, options v1.GetOptions) (*corev1.Pod, error) {
+func (FakePodClient) Get(ctx context.Context, name string, options v1.GetOptions) (*corev1.Pod, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (FakePodClient) List(opts v1.ListOptions) (*corev1.PodList, error) {
+func (FakePodClient) List(ctx context.Context, opts v1.ListOptions) (*corev1.PodList, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (f FakePodClient) Watch(opts v1.ListOptions) (watch.Interface, error) {
+func (f FakePodClient) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
 	f.watchIsCalled = true
 	event := watch.Event{
 		Type:   watch.Added,
@@ -86,17 +87,17 @@ func (f FakePodClient) Watch(opts v1.ListOptions) (watch.Interface, error) {
 	return nil, nil
 }
 
-func (f FakePodClient) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *corev1.Pod, err error) {
+func (f FakePodClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *corev1.Pod, err error) {
 	f.patchIsCalled = true
 	return nil, nil
 }
 
-func (FakePodClient) Bind(binding *corev1.Binding) error {
+func (FakePodClient) Bind(ctx context.Context, binding *corev1.Binding, opts v1.CreateOptions) error {
 	glog.Error("This fake method is not yet implemented.")
 	return nil
 }
 
-func (FakePodClient) Evict(eviction *v1beta1.Eviction) error {
+func (FakePodClient) Evict(ctx context.Context, eviction *v1beta1.Eviction) error {
 	glog.Error("This fake method is not yet implemented.")
 	return nil
 }
@@ -106,10 +107,15 @@ func (FakePodClient) GetLogs(name string, opts *corev1.PodLogOptions) *rest.Requ
 	return nil
 }
 
+func (FakePodClient) ProxyGet(scheme string, name string, port string, path string, params map[string]string) rest.ResponseWrapper {
+	glog.Error("This fake method is not yet implemented.")
+	return nil
+}
+
 type FakeBadPodClient struct {
 	FakePodClient
 }
 
-func (FakeBadPodClient) Delete(name string, options *v1.DeleteOptions) error {
+func (FakeBadPodClient) Delete(ctx context.Context, name string, options v1.DeleteOptions) error {
 	return errors.New("failed to delete pod")
 }
