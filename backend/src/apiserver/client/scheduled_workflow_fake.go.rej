diff a/backend/src/apiserver/client/scheduled_workflow_fake.go b/backend/src/apiserver/client/scheduled_workflow_fake.go	(rejected hunks)
@@ -15,6 +15,7 @@
 package client
 
 import (
+	"context"
 	"errors"
 
 	"github.com/golang/glog"
@@ -36,7 +37,7 @@ func NewScheduledWorkflowClientFake() *FakeScheduledWorkflowClient {
 	}
 }
 
-func (c *FakeScheduledWorkflowClient) Create(scheduledWorkflow *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
+func (c *FakeScheduledWorkflowClient) Create(ctx context.Context, scheduledWorkflow *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
 	scheduledWorkflow.UID = "123e4567-e89b-12d3-a456-426655440000"
 	scheduledWorkflow.Namespace = "ns1"
 	scheduledWorkflow.Name = scheduledWorkflow.GenerateName
@@ -44,7 +45,7 @@ func (c *FakeScheduledWorkflowClient) Create(scheduledWorkflow *v1beta1.Schedule
 	return scheduledWorkflow, nil
 }
 
-func (c *FakeScheduledWorkflowClient) Delete(name string, options *v1.DeleteOptions) error {
+func (c *FakeScheduledWorkflowClient) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
 	_, ok := c.scheduledWorkflows[name]
 	if ok {
 		delete(c.scheduledWorkflows, name)
@@ -53,11 +54,11 @@ func (c *FakeScheduledWorkflowClient) Delete(name string, options *v1.DeleteOpti
 	return k8errors.NewNotFound(k8schema.ParseGroupResource("scheduledworkflows.kubeflow.org"), name)
 }
 
-func (c *FakeScheduledWorkflowClient) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
+func (c *FakeScheduledWorkflowClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
 	return nil, nil
 }
 
-func (c *FakeScheduledWorkflowClient) Get(name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error) {
+func (c *FakeScheduledWorkflowClient) Get(ctx context.Context, name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error) {
 	scheduledWorkflow, ok := c.scheduledWorkflows[name]
 	if ok {
 		return scheduledWorkflow, nil
@@ -65,22 +66,22 @@ func (c *FakeScheduledWorkflowClient) Get(name string, options v1.GetOptions) (*
 	return nil, k8errors.NewNotFound(k8schema.ParseGroupResource("scheduledworkflows.kubeflow.org"), name)
 }
 
-func (c *FakeScheduledWorkflowClient) Update(*v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
+func (c *FakeScheduledWorkflowClient) Update(context.Context, *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (c *FakeScheduledWorkflowClient) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
+func (c *FakeScheduledWorkflowClient) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	glog.Error("This fake method is not yet implemented.")
 	return nil
 }
 
-func (c *FakeScheduledWorkflowClient) List(opts v1.ListOptions) (*v1beta1.ScheduledWorkflowList, error) {
+func (c *FakeScheduledWorkflowClient) List(ctx context.Context, opts v1.ListOptions) (*v1beta1.ScheduledWorkflowList, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
 
-func (c *FakeScheduledWorkflowClient) Watch(opts v1.ListOptions) (watch.Interface, error) {
+func (c *FakeScheduledWorkflowClient) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
 	glog.Error("This fake method is not yet implemented.")
 	return nil, nil
 }
@@ -89,18 +90,18 @@ type FakeBadScheduledWorkflowClient struct {
 	FakeScheduledWorkflowClient
 }
 
-func (FakeBadScheduledWorkflowClient) Create(workflow *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
+func (FakeBadScheduledWorkflowClient) Create(ctx context.Context, workflow *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error) {
 	return nil, errors.New("some error")
 }
 
-func (FakeBadScheduledWorkflowClient) Get(name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error) {
+func (FakeBadScheduledWorkflowClient) Get(ctx context.Context, name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error) {
 	return nil, errors.New("some error")
 }
 
-func (FakeBadScheduledWorkflowClient) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
+func (FakeBadScheduledWorkflowClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
 	return nil, errors.New("some error")
 }
 
-func (c *FakeBadScheduledWorkflowClient) Delete(name string, options *v1.DeleteOptions) error {
+func (c *FakeBadScheduledWorkflowClient) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
 	return errors.New("some error")
 }
