diff a/backend/src/crd/pkg/client/clientset/versioned/typed/scheduledworkflow/v1beta1/scheduledworkflow.go b/backend/src/crd/pkg/client/clientset/versioned/typed/scheduledworkflow/v1beta1/scheduledworkflow.go	(rejected hunks)
@@ -16,6 +16,7 @@
 package v1beta1
 
 import (
+	"context"
 	"time"
 
 	v1beta1 "github.com/kubeflow/pipelines/backend/src/crd/pkg/apis/scheduledworkflow/v1beta1"
@@ -34,14 +35,14 @@ type ScheduledWorkflowsGetter interface {
 
 // ScheduledWorkflowInterface has methods to work with ScheduledWorkflow resources.
 type ScheduledWorkflowInterface interface {
-	Create(*v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error)
-	Update(*v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error)
-	Delete(name string, options *v1.DeleteOptions) error
-	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
-	Get(name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error)
-	List(opts v1.ListOptions) (*v1beta1.ScheduledWorkflowList, error)
-	Watch(opts v1.ListOptions) (watch.Interface, error)
-	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error)
+	Create(context.Context, *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error)
+	Update(context.Context, *v1beta1.ScheduledWorkflow) (*v1beta1.ScheduledWorkflow, error)
+	Delete(ctx context.Context, name string, options *v1.DeleteOptions) error
+	DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error
+	Get(ctx context.Context, name string, options v1.GetOptions) (*v1beta1.ScheduledWorkflow, error)
+	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.ScheduledWorkflowList, error)
+	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
+	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error)
 	ScheduledWorkflowExpansion
 }
 
@@ -60,20 +61,20 @@ func newScheduledWorkflows(c *ScheduledworkflowV1beta1Client, namespace string)
 }
 
 // Get takes name of the scheduledWorkflow, and returns the corresponding scheduledWorkflow object, and an error if there is any.
-func (c *scheduledWorkflows) Get(name string, options v1.GetOptions) (result *v1beta1.ScheduledWorkflow, err error) {
+func (c *scheduledWorkflows) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.ScheduledWorkflow, err error) {
 	result = &v1beta1.ScheduledWorkflow{}
 	err = c.client.Get().
 		Namespace(c.ns).
 		Resource("scheduledworkflows").
 		Name(name).
 		VersionedParams(&options, scheme.ParameterCodec).
-		Do().
+		Do(ctx).
 		Into(result)
 	return
 }
 
 // List takes label and field selectors, and returns the list of ScheduledWorkflows that match those selectors.
-func (c *scheduledWorkflows) List(opts v1.ListOptions) (result *v1beta1.ScheduledWorkflowList, err error) {
+func (c *scheduledWorkflows) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.ScheduledWorkflowList, err error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
@@ -84,13 +85,13 @@ func (c *scheduledWorkflows) List(opts v1.ListOptions) (result *v1beta1.Schedule
 		Resource("scheduledworkflows").
 		VersionedParams(&opts, scheme.ParameterCodec).
 		Timeout(timeout).
-		Do().
+		Do(ctx).
 		Into(result)
 	return
 }
 
 // Watch returns a watch.Interface that watches the requested scheduledWorkflows.
-func (c *scheduledWorkflows) Watch(opts v1.ListOptions) (watch.Interface, error) {
+func (c *scheduledWorkflows) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
 	var timeout time.Duration
 	if opts.TimeoutSeconds != nil {
 		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
@@ -101,47 +102,47 @@ func (c *scheduledWorkflows) Watch(opts v1.ListOptions) (watch.Interface, error)
 		Resource("scheduledworkflows").
 		VersionedParams(&opts, scheme.ParameterCodec).
 		Timeout(timeout).
-		Watch()
+		Watch(ctx)
 }
 
 // Create takes the representation of a scheduledWorkflow and creates it.  Returns the server's representation of the scheduledWorkflow, and an error, if there is any.
-func (c *scheduledWorkflows) Create(scheduledWorkflow *v1beta1.ScheduledWorkflow) (result *v1beta1.ScheduledWorkflow, err error) {
+func (c *scheduledWorkflows) Create(ctx context.Context, scheduledWorkflow *v1beta1.ScheduledWorkflow) (result *v1beta1.ScheduledWorkflow, err error) {
 	result = &v1beta1.ScheduledWorkflow{}
 	err = c.client.Post().
 		Namespace(c.ns).
 		Resource("scheduledworkflows").
 		Body(scheduledWorkflow).
-		Do().
+		Do(ctx).
 		Into(result)
 	return
 }
 
 // Update takes the representation of a scheduledWorkflow and updates it. Returns the server's representation of the scheduledWorkflow, and an error, if there is any.
-func (c *scheduledWorkflows) Update(scheduledWorkflow *v1beta1.ScheduledWorkflow) (result *v1beta1.ScheduledWorkflow, err error) {
+func (c *scheduledWorkflows) Update(ctx context.Context, scheduledWorkflow *v1beta1.ScheduledWorkflow) (result *v1beta1.ScheduledWorkflow, err error) {
 	result = &v1beta1.ScheduledWorkflow{}
 	err = c.client.Put().
 		Namespace(c.ns).
 		Resource("scheduledworkflows").
 		Name(scheduledWorkflow.Name).
 		Body(scheduledWorkflow).
-		Do().
+		Do(ctx).
 		Into(result)
 	return
 }
 
 // Delete takes name of the scheduledWorkflow and deletes it. Returns an error if one occurs.
-func (c *scheduledWorkflows) Delete(name string, options *v1.DeleteOptions) error {
+func (c *scheduledWorkflows) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
 	return c.client.Delete().
 		Namespace(c.ns).
 		Resource("scheduledworkflows").
 		Name(name).
 		Body(options).
-		Do().
+		Do(ctx).
 		Error()
 }
 
 // DeleteCollection deletes a collection of objects.
-func (c *scheduledWorkflows) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
+func (c *scheduledWorkflows) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
 	var timeout time.Duration
 	if listOptions.TimeoutSeconds != nil {
 		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
@@ -152,12 +153,12 @@ func (c *scheduledWorkflows) DeleteCollection(options *v1.DeleteOptions, listOpt
 		VersionedParams(&listOptions, scheme.ParameterCodec).
 		Timeout(timeout).
 		Body(options).
-		Do().
+		Do(ctx).
 		Error()
 }
 
 // Patch applies the patch and returns the patched scheduledWorkflow.
-func (c *scheduledWorkflows) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
+func (c *scheduledWorkflows) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.ScheduledWorkflow, err error) {
 	result = &v1beta1.ScheduledWorkflow{}
 	err = c.client.Patch(pt).
 		Namespace(c.ns).
@@ -165,7 +166,7 @@ func (c *scheduledWorkflows) Patch(name string, pt types.PatchType, data []byte,
 		SubResource(subresources...).
 		Name(name).
 		Body(data).
-		Do().
+		Do(ctx).
 		Into(result)
 	return
 }
