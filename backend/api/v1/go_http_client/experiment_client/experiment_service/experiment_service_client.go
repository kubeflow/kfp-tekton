// Code generated by go-swagger; DO NOT EDIT.

package experiment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new experiment service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for experiment service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExperimentServiceArchiveExperiment(params *ExperimentServiceArchiveExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceArchiveExperimentOK, error)

	ExperimentServiceCreateExperiment(params *ExperimentServiceCreateExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceCreateExperimentOK, error)

	ExperimentServiceDeleteExperiment(params *ExperimentServiceDeleteExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceDeleteExperimentOK, error)

	ExperimentServiceGetExperiment(params *ExperimentServiceGetExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceGetExperimentOK, error)

	ExperimentServiceListExperiment(params *ExperimentServiceListExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceListExperimentOK, error)

	ExperimentServiceUnarchiveExperiment(params *ExperimentServiceUnarchiveExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceUnarchiveExperimentOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ExperimentServiceArchiveExperiment archives an experiment and the experiment s runs and jobs
*/
func (a *Client) ExperimentServiceArchiveExperiment(params *ExperimentServiceArchiveExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceArchiveExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceArchiveExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_ArchiveExperiment",
		Method:             "POST",
		PathPattern:        "/apis/v1/experiments/{id}:archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceArchiveExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceArchiveExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceArchiveExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExperimentServiceCreateExperiment creates a new experiment
*/
func (a *Client) ExperimentServiceCreateExperiment(params *ExperimentServiceCreateExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceCreateExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceCreateExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_CreateExperiment",
		Method:             "POST",
		PathPattern:        "/apis/v1/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceCreateExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceCreateExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceCreateExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExperimentServiceDeleteExperiment deletes an experiment without deleting the experiment s runs and jobs to avoid unexpected behaviors delete an experiment s runs and jobs before deleting the experiment
*/
func (a *Client) ExperimentServiceDeleteExperiment(params *ExperimentServiceDeleteExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceDeleteExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceDeleteExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_DeleteExperiment",
		Method:             "DELETE",
		PathPattern:        "/apis/v1/experiments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceDeleteExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceDeleteExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceDeleteExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExperimentServiceGetExperiment finds a specific experiment by ID
*/
func (a *Client) ExperimentServiceGetExperiment(params *ExperimentServiceGetExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceGetExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceGetExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_GetExperiment",
		Method:             "GET",
		PathPattern:        "/apis/v1/experiments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceGetExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceGetExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceGetExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExperimentServiceListExperiment finds all experiments supports pagination and sorting on certain fields
*/
func (a *Client) ExperimentServiceListExperiment(params *ExperimentServiceListExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceListExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceListExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_ListExperiment",
		Method:             "GET",
		PathPattern:        "/apis/v1/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceListExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceListExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceListExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ExperimentServiceUnarchiveExperiment restores an archived experiment the experiment s archived runs and jobs will stay archived
*/
func (a *Client) ExperimentServiceUnarchiveExperiment(params *ExperimentServiceUnarchiveExperimentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExperimentServiceUnarchiveExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExperimentServiceUnarchiveExperimentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExperimentService_UnarchiveExperiment",
		Method:             "POST",
		PathPattern:        "/apis/v1/experiments/{id}:unarchive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExperimentServiceUnarchiveExperimentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExperimentServiceUnarchiveExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ExperimentServiceUnarchiveExperimentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
