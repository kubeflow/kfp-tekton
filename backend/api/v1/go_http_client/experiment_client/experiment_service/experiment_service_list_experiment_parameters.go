// Code generated by go-swagger; DO NOT EDIT.

package experiment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExperimentServiceListExperimentParams creates a new ExperimentServiceListExperimentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExperimentServiceListExperimentParams() *ExperimentServiceListExperimentParams {
	return &ExperimentServiceListExperimentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExperimentServiceListExperimentParamsWithTimeout creates a new ExperimentServiceListExperimentParams object
// with the ability to set a timeout on a request.
func NewExperimentServiceListExperimentParamsWithTimeout(timeout time.Duration) *ExperimentServiceListExperimentParams {
	return &ExperimentServiceListExperimentParams{
		timeout: timeout,
	}
}

// NewExperimentServiceListExperimentParamsWithContext creates a new ExperimentServiceListExperimentParams object
// with the ability to set a context for a request.
func NewExperimentServiceListExperimentParamsWithContext(ctx context.Context) *ExperimentServiceListExperimentParams {
	return &ExperimentServiceListExperimentParams{
		Context: ctx,
	}
}

// NewExperimentServiceListExperimentParamsWithHTTPClient creates a new ExperimentServiceListExperimentParams object
// with the ability to set a custom HTTPClient for a request.
func NewExperimentServiceListExperimentParamsWithHTTPClient(client *http.Client) *ExperimentServiceListExperimentParams {
	return &ExperimentServiceListExperimentParams{
		HTTPClient: client,
	}
}

/*
ExperimentServiceListExperimentParams contains all the parameters to send to the API endpoint

	for the experiment service list experiment operation.

	Typically these are written to a http.Request.
*/
type ExperimentServiceListExperimentParams struct {

	/* Filter.

	     A url-encoded, JSON-serialized Filter protocol buffer (see
	[filter.proto](https://github.com/kubeflow/pipelines/blob/master/backend/api/v1/filter.proto)).
	*/
	Filter *string

	/* PageSize.

	     The number of experiments to be listed per page. If there are more
	experiments than this number, the response message will contain a
	nextPageToken field you can use to fetch the next page.

	     Format: int32
	*/
	PageSize *int32

	/* PageToken.

	     A page token to request the next page of results. The token is acquried
	from the nextPageToken field of the response from the previous
	ListExperiment call or can be omitted when fetching the first page.
	*/
	PageToken *string

	/* ResourceReferenceKeyID.

	   The ID of the resource that referred to.
	*/
	ResourceReferenceKeyID *string

	/* ResourceReferenceKeyType.

	   The type of the resource that referred to.

	   Default: "UNKNOWN_RESOURCE_TYPE"
	*/
	ResourceReferenceKeyType *string

	/* SortBy.

	     Can be format of "field_name", "field_name asc" or "field_name desc"
	Ascending by default.
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the experiment service list experiment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExperimentServiceListExperimentParams) WithDefaults() *ExperimentServiceListExperimentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the experiment service list experiment params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExperimentServiceListExperimentParams) SetDefaults() {
	var (
		resourceReferenceKeyTypeDefault = string("UNKNOWN_RESOURCE_TYPE")
	)

	val := ExperimentServiceListExperimentParams{
		ResourceReferenceKeyType: &resourceReferenceKeyTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithTimeout(timeout time.Duration) *ExperimentServiceListExperimentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithContext(ctx context.Context) *ExperimentServiceListExperimentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithHTTPClient(client *http.Client) *ExperimentServiceListExperimentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithFilter(filter *string) *ExperimentServiceListExperimentParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithPageSize adds the pageSize to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithPageSize(pageSize *int32) *ExperimentServiceListExperimentParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithPageToken(pageToken *string) *ExperimentServiceListExperimentParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithResourceReferenceKeyID adds the resourceReferenceKeyID to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithResourceReferenceKeyID(resourceReferenceKeyID *string) *ExperimentServiceListExperimentParams {
	o.SetResourceReferenceKeyID(resourceReferenceKeyID)
	return o
}

// SetResourceReferenceKeyID adds the resourceReferenceKeyId to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetResourceReferenceKeyID(resourceReferenceKeyID *string) {
	o.ResourceReferenceKeyID = resourceReferenceKeyID
}

// WithResourceReferenceKeyType adds the resourceReferenceKeyType to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithResourceReferenceKeyType(resourceReferenceKeyType *string) *ExperimentServiceListExperimentParams {
	o.SetResourceReferenceKeyType(resourceReferenceKeyType)
	return o
}

// SetResourceReferenceKeyType adds the resourceReferenceKeyType to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetResourceReferenceKeyType(resourceReferenceKeyType *string) {
	o.ResourceReferenceKeyType = resourceReferenceKeyType
}

// WithSortBy adds the sortBy to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) WithSortBy(sortBy *string) *ExperimentServiceListExperimentParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the experiment service list experiment params
func (o *ExperimentServiceListExperimentParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ExperimentServiceListExperimentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.ResourceReferenceKeyID != nil {

		// query param resourceReferenceKey.id
		var qrResourceReferenceKeyID string

		if o.ResourceReferenceKeyID != nil {
			qrResourceReferenceKeyID = *o.ResourceReferenceKeyID
		}
		qResourceReferenceKeyID := qrResourceReferenceKeyID
		if qResourceReferenceKeyID != "" {

			if err := r.SetQueryParam("resourceReferenceKey.id", qResourceReferenceKeyID); err != nil {
				return err
			}
		}
	}

	if o.ResourceReferenceKeyType != nil {

		// query param resourceReferenceKey.type
		var qrResourceReferenceKeyType string

		if o.ResourceReferenceKeyType != nil {
			qrResourceReferenceKeyType = *o.ResourceReferenceKeyType
		}
		qResourceReferenceKeyType := qrResourceReferenceKeyType
		if qResourceReferenceKeyType != "" {

			if err := r.SetQueryParam("resourceReferenceKey.type", qResourceReferenceKeyType); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
