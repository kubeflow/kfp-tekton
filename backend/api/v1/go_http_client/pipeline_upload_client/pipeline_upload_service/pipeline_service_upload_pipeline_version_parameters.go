// Code generated by go-swagger; DO NOT EDIT.

package pipeline_upload_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPipelineServiceUploadPipelineVersionParams creates a new PipelineServiceUploadPipelineVersionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPipelineServiceUploadPipelineVersionParams() *PipelineServiceUploadPipelineVersionParams {
	return &PipelineServiceUploadPipelineVersionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPipelineServiceUploadPipelineVersionParamsWithTimeout creates a new PipelineServiceUploadPipelineVersionParams object
// with the ability to set a timeout on a request.
func NewPipelineServiceUploadPipelineVersionParamsWithTimeout(timeout time.Duration) *PipelineServiceUploadPipelineVersionParams {
	return &PipelineServiceUploadPipelineVersionParams{
		timeout: timeout,
	}
}

// NewPipelineServiceUploadPipelineVersionParamsWithContext creates a new PipelineServiceUploadPipelineVersionParams object
// with the ability to set a context for a request.
func NewPipelineServiceUploadPipelineVersionParamsWithContext(ctx context.Context) *PipelineServiceUploadPipelineVersionParams {
	return &PipelineServiceUploadPipelineVersionParams{
		Context: ctx,
	}
}

// NewPipelineServiceUploadPipelineVersionParamsWithHTTPClient creates a new PipelineServiceUploadPipelineVersionParams object
// with the ability to set a custom HTTPClient for a request.
func NewPipelineServiceUploadPipelineVersionParamsWithHTTPClient(client *http.Client) *PipelineServiceUploadPipelineVersionParams {
	return &PipelineServiceUploadPipelineVersionParams{
		HTTPClient: client,
	}
}

/*
PipelineServiceUploadPipelineVersionParams contains all the parameters to send to the API endpoint

	for the pipeline service upload pipeline version operation.

	Typically these are written to a http.Request.
*/
type PipelineServiceUploadPipelineVersionParams struct {

	// Description.
	Description *string

	// Name.
	Name *string

	// Pipelineid.
	Pipelineid *string

	/* Uploadfile.

	   The pipeline to upload. Maximum size of 32MB is supported.
	*/
	Uploadfile runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pipeline service upload pipeline version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineServiceUploadPipelineVersionParams) WithDefaults() *PipelineServiceUploadPipelineVersionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pipeline service upload pipeline version params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineServiceUploadPipelineVersionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithTimeout(timeout time.Duration) *PipelineServiceUploadPipelineVersionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithContext(ctx context.Context) *PipelineServiceUploadPipelineVersionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithHTTPClient(client *http.Client) *PipelineServiceUploadPipelineVersionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithDescription(description *string) *PipelineServiceUploadPipelineVersionParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetDescription(description *string) {
	o.Description = description
}

// WithName adds the name to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithName(name *string) *PipelineServiceUploadPipelineVersionParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetName(name *string) {
	o.Name = name
}

// WithPipelineid adds the pipelineid to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithPipelineid(pipelineid *string) *PipelineServiceUploadPipelineVersionParams {
	o.SetPipelineid(pipelineid)
	return o
}

// SetPipelineid adds the pipelineid to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetPipelineid(pipelineid *string) {
	o.Pipelineid = pipelineid
}

// WithUploadfile adds the uploadfile to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) WithUploadfile(uploadfile runtime.NamedReadCloser) *PipelineServiceUploadPipelineVersionParams {
	o.SetUploadfile(uploadfile)
	return o
}

// SetUploadfile adds the uploadfile to the pipeline service upload pipeline version params
func (o *PipelineServiceUploadPipelineVersionParams) SetUploadfile(uploadfile runtime.NamedReadCloser) {
	o.Uploadfile = uploadfile
}

// WriteToRequest writes these params to a swagger request
func (o *PipelineServiceUploadPipelineVersionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Pipelineid != nil {

		// query param pipelineid
		var qrPipelineid string

		if o.Pipelineid != nil {
			qrPipelineid = *o.Pipelineid
		}
		qPipelineid := qrPipelineid
		if qPipelineid != "" {

			if err := r.SetQueryParam("pipelineid", qPipelineid); err != nil {
				return err
			}
		}
	}
	// form file param uploadfile
	if err := r.SetFileParam("uploadfile", o.Uploadfile); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
