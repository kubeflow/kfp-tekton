// Code generated by go-swagger; DO NOT EDIT.

package pipeline_upload_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Relationship v1 relationship
//
// swagger:model v1Relationship
type V1Relationship string

func NewV1Relationship(value V1Relationship) *V1Relationship {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1Relationship.
func (m V1Relationship) Pointer() *V1Relationship {
	return &m
}

const (

	// V1RelationshipUNKNOWNRELATIONSHIP captures enum value "UNKNOWN_RELATIONSHIP"
	V1RelationshipUNKNOWNRELATIONSHIP V1Relationship = "UNKNOWN_RELATIONSHIP"

	// V1RelationshipOWNER captures enum value "OWNER"
	V1RelationshipOWNER V1Relationship = "OWNER"

	// V1RelationshipCREATOR captures enum value "CREATOR"
	V1RelationshipCREATOR V1Relationship = "CREATOR"
)

// for schema
var v1RelationshipEnum []interface{}

func init() {
	var res []V1Relationship
	if err := json.Unmarshal([]byte(`["UNKNOWN_RELATIONSHIP","OWNER","CREATOR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1RelationshipEnum = append(v1RelationshipEnum, v)
	}
}

func (m V1Relationship) validateV1RelationshipEnum(path, location string, value V1Relationship) error {
	if err := validate.EnumCase(path, location, value, v1RelationshipEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 relationship
func (m V1Relationship) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1RelationshipEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 relationship based on context it is used
func (m V1Relationship) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
