// Code generated by go-swagger; DO NOT EDIT.

package run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kubeflow/pipelines/backend/api/v1/go_http_client/run_model"
)

// RunServiceReportRunMetricsReader is a Reader for the RunServiceReportRunMetrics structure.
type RunServiceReportRunMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunServiceReportRunMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunServiceReportRunMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRunServiceReportRunMetricsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunServiceReportRunMetricsOK creates a RunServiceReportRunMetricsOK with default headers values
func NewRunServiceReportRunMetricsOK() *RunServiceReportRunMetricsOK {
	return &RunServiceReportRunMetricsOK{}
}

/*
RunServiceReportRunMetricsOK describes a response with status code 200, with default header values.

A successful response.
*/
type RunServiceReportRunMetricsOK struct {
	Payload *run_model.V1ReportRunMetricsResponse
}

// IsSuccess returns true when this run service report run metrics o k response has a 2xx status code
func (o *RunServiceReportRunMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this run service report run metrics o k response has a 3xx status code
func (o *RunServiceReportRunMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this run service report run metrics o k response has a 4xx status code
func (o *RunServiceReportRunMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this run service report run metrics o k response has a 5xx status code
func (o *RunServiceReportRunMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this run service report run metrics o k response a status code equal to that given
func (o *RunServiceReportRunMetricsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the run service report run metrics o k response
func (o *RunServiceReportRunMetricsOK) Code() int {
	return 200
}

func (o *RunServiceReportRunMetricsOK) Error() string {
	return fmt.Sprintf("[POST /apis/v1/runs/{runId}:reportMetrics][%d] runServiceReportRunMetricsOK  %+v", 200, o.Payload)
}

func (o *RunServiceReportRunMetricsOK) String() string {
	return fmt.Sprintf("[POST /apis/v1/runs/{runId}:reportMetrics][%d] runServiceReportRunMetricsOK  %+v", 200, o.Payload)
}

func (o *RunServiceReportRunMetricsOK) GetPayload() *run_model.V1ReportRunMetricsResponse {
	return o.Payload
}

func (o *RunServiceReportRunMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(run_model.V1ReportRunMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunServiceReportRunMetricsDefault creates a RunServiceReportRunMetricsDefault with default headers values
func NewRunServiceReportRunMetricsDefault(code int) *RunServiceReportRunMetricsDefault {
	return &RunServiceReportRunMetricsDefault{
		_statusCode: code,
	}
}

/*
RunServiceReportRunMetricsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type RunServiceReportRunMetricsDefault struct {
	_statusCode int

	Payload *run_model.GooglerpcStatus
}

// IsSuccess returns true when this run service report run metrics default response has a 2xx status code
func (o *RunServiceReportRunMetricsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this run service report run metrics default response has a 3xx status code
func (o *RunServiceReportRunMetricsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this run service report run metrics default response has a 4xx status code
func (o *RunServiceReportRunMetricsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this run service report run metrics default response has a 5xx status code
func (o *RunServiceReportRunMetricsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this run service report run metrics default response a status code equal to that given
func (o *RunServiceReportRunMetricsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the run service report run metrics default response
func (o *RunServiceReportRunMetricsDefault) Code() int {
	return o._statusCode
}

func (o *RunServiceReportRunMetricsDefault) Error() string {
	return fmt.Sprintf("[POST /apis/v1/runs/{runId}:reportMetrics][%d] RunService_ReportRunMetrics default  %+v", o._statusCode, o.Payload)
}

func (o *RunServiceReportRunMetricsDefault) String() string {
	return fmt.Sprintf("[POST /apis/v1/runs/{runId}:reportMetrics][%d] RunService_ReportRunMetrics default  %+v", o._statusCode, o.Payload)
}

func (o *RunServiceReportRunMetricsDefault) GetPayload() *run_model.GooglerpcStatus {
	return o.Payload
}

func (o *RunServiceReportRunMetricsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(run_model.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
RunServiceReportRunMetricsBody run service report run metrics body
swagger:model RunServiceReportRunMetricsBody
*/
type RunServiceReportRunMetricsBody struct {

	// List of metrics to report.
	Metrics []*run_model.V1RunMetric `json:"metrics"`
}

// Validate validates this run service report run metrics body
func (o *RunServiceReportRunMetricsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunServiceReportRunMetricsBody) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(o.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(o.Metrics); i++ {
		if swag.IsZero(o.Metrics[i]) { // not required
			continue
		}

		if o.Metrics[i] != nil {
			if err := o.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this run service report run metrics body based on the context it is used
func (o *RunServiceReportRunMetricsBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RunServiceReportRunMetricsBody) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Metrics); i++ {

		if o.Metrics[i] != nil {
			if err := o.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RunServiceReportRunMetricsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RunServiceReportRunMetricsBody) UnmarshalBinary(b []byte) error {
	var res RunServiceReportRunMetricsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
