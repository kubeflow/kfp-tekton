// Code generated by go-swagger; DO NOT EDIT.

package visualization_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1VisualizationType Type of visualization to be generated.
// This is required when creating the pipeline through CreateVisualization
// API.
//
// swagger:model v1VisualizationType
type V1VisualizationType string

func NewV1VisualizationType(value V1VisualizationType) *V1VisualizationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1VisualizationType.
func (m V1VisualizationType) Pointer() *V1VisualizationType {
	return &m
}

const (

	// V1VisualizationTypeROCCURVE captures enum value "ROC_CURVE"
	V1VisualizationTypeROCCURVE V1VisualizationType = "ROC_CURVE"

	// V1VisualizationTypeTFDV captures enum value "TFDV"
	V1VisualizationTypeTFDV V1VisualizationType = "TFDV"

	// V1VisualizationTypeTFMA captures enum value "TFMA"
	V1VisualizationTypeTFMA V1VisualizationType = "TFMA"

	// V1VisualizationTypeTABLE captures enum value "TABLE"
	V1VisualizationTypeTABLE V1VisualizationType = "TABLE"

	// V1VisualizationTypeCUSTOM captures enum value "CUSTOM"
	V1VisualizationTypeCUSTOM V1VisualizationType = "CUSTOM"
)

// for schema
var v1VisualizationTypeEnum []interface{}

func init() {
	var res []V1VisualizationType
	if err := json.Unmarshal([]byte(`["ROC_CURVE","TFDV","TFMA","TABLE","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1VisualizationTypeEnum = append(v1VisualizationTypeEnum, v)
	}
}

func (m V1VisualizationType) validateV1VisualizationTypeEnum(path, location string, value V1VisualizationType) error {
	if err := validate.EnumCase(path, location, value, v1VisualizationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 visualization type
func (m V1VisualizationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1VisualizationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 visualization type based on context it is used
func (m V1VisualizationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
