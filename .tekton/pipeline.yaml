apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline
spec:
  params:
    - name: repository
      description: the git repo
    - name: revision
      description: the revision
      default: master
    - name: apikey
      description: the ibmcloud api key
    - name: registry-url
      description: ibm container registry url
    - name: registry-namespace
      description: the ibmcloud registry namespace
    - name: docker-username
      description: for ibm container registry
      default: iamapikey
    - name: docker-password
      description: iam api key
    - name: public-cr-username
      description: username for public container registry
    - name: public-cr-password
      description: password/token for public container registry
    - name: public-cr
      description: public container registry
      default: docker.io
    - name: resource-group
      description: resource group
      default: default
    - name: org
      description: organization
    - name: region
      description: region
    - name: space
      description: space
    - name: tekton-version
      description: tekton version
    - name: tekton-ns
      description: tekton namespace
      default: tekton-pipeline
    - name: kubeflow-ns
      description: kubeflow namespace
      default: kubeflow
    - name: kubernetes-cluster
      description: cluster name
    - name: slack-webhook
      description: webhook URL
      default: ""
    - name: slack-channel
      description: slack channel
      default: ""
    - name: publish-to-public-cr
      description: publish images to public container registry
      default: "0"
    - name: extra-test-cases
      description: execute extra test cases
      default: "0"
    - name: skip-pipeline-loop
      descript: skip the pipeline loop test case
      default: "0"
    - name: image-tag
      description: image tag
      default: "nightly"
    - name: public-cr-namespace
      description: namespace for public container registry
      default: aipipeline
    - name: images
      description: a image list for publishing
      default: "api-server persistenceagent metadata-writer scheduledworkflow cache-server frontend pipelineloop-controller pipelineloop-webhook kubeclient"
    - name: many-edge-duration
      description: duration threshold for many edge pipeline
      value: "7"
  workspaces:
  - name: pipeline-pvc
  tasks:
    - name: test
      taskRef:
        name: test
      params:
        - name: repository
          value: $(params.repository)
        - name: revision
          value: $(params.revision)
        - name: apikey
          value: $(params.apikey)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: $(params.docker-username)
        - name: docker-password
          value: $(params.docker-password)
        - name: resource-group
          value: $(params.resource-group)
        - name: org
          value: $(params.org)
        - name: region
          value: $(params.region)
        - name: space
          value: $(params.space)
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-artifact
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: api-server
        - name: docker-root
          value: .
        - name: docker-file
          value: ""
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: artifact
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-api-server
      retries: 1
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: api-server
        - name: docker-root
          value: .
        - name: docker-file
          value: backend/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-persistenceagent
      retries: 1
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: persistenceagent
        - name: docker-root
          value: .
        - name: docker-file
          value: backend/Dockerfile.persistenceagent
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-metadata-writer
      retries: 1
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: metadata-writer
        - name: docker-root
          value: .
        - name: docker-file
          value: backend/metadata_writer/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-scheduledworkflow
      retries: 1
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: scheduledworkflow
        - name: docker-root
          value: .
        - name: docker-file
          value: backend/Dockerfile.scheduledworkflow
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-cacheserver
      retries: 1
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: cache-server
        - name: docker-root
          value: .
        - name: docker-file
          value: backend/Dockerfile.cacheserver
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-images-frontend
      taskRef:
        name: build-images-dnd
      runAfter:
        - test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: frontend
        - name: docker-root
          value: .
        - name: docker-file
          value: frontend/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
        - name: build-args
          value: "COMMIT_HASH=$(git rev-parse HEAD) DATE=\"$(date -u)\""
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-pipeline-loops-binaries
      taskRef:
        name: build-binaries
      runAfter:
        - test
        - build-images-api-server
        - build-images-persistenceagent
        - build-images-cacheserver
        - build-images-scheduledworkflow
      params:
        - name: build-dir
          value: tekton-catalog/pipeline-loops
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-any-sequencer-binaries
      taskRef:
        name: build-binaries
      runAfter:
        - test
        - build-images-api-server
        - build-images-persistenceagent
        - build-images-cacheserver
        - build-images-scheduledworkflow
      params:
        - name: build-dir
          value: tekton-catalog/any-sequencer
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: build-kubectl-wrapper-binaries
      taskRef:
        name: build-binaries
      runAfter:
        - test
        - build-images-api-server
        - build-images-persistenceagent
        - build-images-cacheserver
        - build-images-scheduledworkflow
      params:
        - name: build-dir
          value: tekton-catalog/kubectl-wrapper
      workspaces:
        - name: task-pvc
          workspace: pipeline-pvc
    - name: containerize-pipelineloop-controller
      runAfter:
        - build-pipeline-loops-binaries
      taskRef:
        name: build-images-dnd
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: pipelineloop-controller
        - name: docker-root
          value: tekton-catalog/pipeline-loops
        - name: docker-file
          value: tekton-catalog/pipeline-loops/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: build-args
          value: "bin_name=pipelineloop-controller"
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: containerize-pipelineloop-webhook
      runAfter:
        - build-pipeline-loops-binaries
      taskRef:
        name: build-images-dnd
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: pipelineloop-webhook
        - name: docker-root
          value: tekton-catalog/pipeline-loops
        - name: docker-file
          value: tekton-catalog/pipeline-loops/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: build-args
          value: "bin_name=pipelineloop-webhook"
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: containerize-any-sequencer
      runAfter:
        - build-any-sequencer-binaries
      taskRef:
        name: build-images-dnd
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: any-sequencer
        - name: docker-root
          value: tekton-catalog/any-sequencer
        - name: docker-file
          value: tekton-catalog/any-sequencer/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: containerize-kubectl-wrapper
      runAfter:
        - build-kubectl-wrapper-binaries
      taskRef:
        name: build-images-dnd
      params:
        - name: apikey
          value: $(params.apikey)
        - name: image-name
          value: kubeclient
        - name: docker-root
          value: tekton-catalog/kubectl-wrapper
        - name: docker-file
          value: tekton-catalog/kubectl-wrapper/Dockerfile
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: run-task
          value: image
      workspaces:
        - name: task-pvc
          workspace: pipeline-pvc
    - name: deploy
      taskRef:
        name: deploy
      runAfter:
        - build-images-api-server
        - build-images-persistenceagent
        - build-images-metadata-writer
        - build-images-scheduledworkflow
        - build-images-cacheserver
        - build-images-frontend
      params:
        - name: apikey
          value: $(params.apikey)
        - name: docker-username
          value: iamapikey
        - name: docker-password
          value: $(params.docker-password)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: public-cr
          value: $(params.public-cr)
        # - name: tekton-version
        #   value: $(params.tekton-version)
        # - name: tekton-ns
        #   value: $(params.tekton-ns)
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: setup-pipeline-loops-deploy
      taskRef:
        name: setup-pipeline-loops-deploy
      runAfter:
        - containerize-pipelineloop-controller
        - containerize-pipelineloop-webhook
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: setup-kubectl-wrapper-deploy
      taskRef:
        name: setup-kubectl-wrapper-deploy
      runAfter:
        - containerize-kubectl-wrapper
      workspaces:
        - name: task-pvc
          workspace: pipeline-pvc
    - name: deploy-pipeline-loops-e2e
      retries: 1
      taskRef:
        name: iks-test
      runAfter:
        - setup-pipeline-loops-deploy
        - deploy
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: resource-group
          value: $(params.resource-group)
        - name: org
          value: $(params.org)
        - name: region
          value: $(params.region)
        - name: space
          value: $(params.space)
        - name: test-commands
          value: |
            export SKIP_PIPELINE_LOOP=$(params.skip-pipeline-loop);
            source scripts/deploy/iks/tekton-catalog/deploy-pipeline-loops-e2e.sh;
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: deploy-any-sequencer-e2e
      retries: 1
      taskRef:
        name: iks-test
      runAfter:
        - deploy
        - containerize-any-sequencer
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: resource-group
          value: $(params.resource-group)
        - name: org
          value: $(params.org)
        - name: region
          value: $(params.region)
        - name: space
          value: $(params.space)
        - name: test-commands
          value: |
            export NEW_IMAGE_URL="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/any-sequencer"
            export NEW_IMAGE_TAG="${IMAGE_TAG}"
            kubectl create clusterrolebinding pipeline-runner-extend --clusterrole=cluster-admin --serviceaccount=default:default || true
            source scripts/deploy/iks/tekton-catalog/deploy-any-sequencer-e2e.sh
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: deploy-kubectl-wrapper-e2e
      retries: 1
      taskRef:
        name: iks-test
      runAfter:
        - deploy
        - setup-kubectl-wrapper-deploy
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: resource-group
          value: $(params.resource-group)
        - name: org
          value: $(params.org)
        - name: region
          value: $(params.region)
        - name: space
          value: $(params.space)
        - name: test-commands
          value: |
            export MANIFEST="resourceop_basic.yaml"
            source scripts/deploy/iks/tekton-catalog/deploy-kubectl-wrapper-e2e.sh
      workspaces:
        - name: task-pvc
          workspace: pipeline-pvc
    - name: e2e-test-flip-coin
      retries: 1
      taskRef:
        name: e2e-test
      runAfter:
        - deploy
        - deploy-pipeline-loops-e2e
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: slack-webhook
          value: $(params.slack-webhook)
        - name: slack-channel
          value: $(params.slack-channel)
        - name: test-script
          value: "scripts/deploy/iks/test-flip-coin.sh"
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: e2e-test-cond-dep
      retries: 1
      taskRef:
        name: e2e-test
      runAfter:
        - deploy
        - deploy-pipeline-loops-e2e
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: slack-webhook
          value: $(params.slack-webhook)
        - name: slack-channel
          value: $(params.slack-channel)
        - name: test-script
          value: "scripts/deploy/iks/test-condition-depend.sh"
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: e2e-test-cache
      retries: 1
      taskRef:
        name: e2e-test
      runAfter:
        - deploy
        - deploy-pipeline-loops-e2e
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: slack-webhook
          value: $(params.slack-webhook)
        - name: slack-channel
          value: $(params.slack-channel)
        - name: test-script
          value: "scripts/deploy/iks/test-cache.sh"
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: e2e-test-many-edges
      retries: 2
      taskRef:
        name: e2e-test
      runAfter:
        - deploy
        - deploy-pipeline-loops-e2e
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: slack-webhook
          value: $(params.slack-webhook)
        - name: slack-channel
          value: $(params.slack-channel)
        - name: test-script
          value: "scripts/deploy/iks/test-many-edges.sh"
        - name: many-edge-duration
          value: $(params.many-edge-duration)
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: e2e-test-trusted-ai
      retries: 1
      taskRef:
        name: e2e-test
      runAfter:
        - deploy
        - deploy-pipeline-loops-e2e
      when:
        - input: $(params.extra-test-cases)
          operator: in
          values:
            - '1'
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: slack-webhook
          value: $(params.slack-webhook)
        - name: slack-channel
          value: $(params.slack-channel)
        - name: test-script
          value: "scripts/deploy/iks/test-trusted-ai.sh"
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: publish-images
      taskRef:
        name: publish-images
      runAfter:
        - e2e-test-flip-coin
        - deploy-any-sequencer-e2e
        - deploy-kubectl-wrapper-e2e
      when:
        - input: $(params.publish-to-public-cr)
          operator: in
          values:
            - '1'
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: registry-url
          value: $(params.registry-url)
        - name: registry-namespace
          value: $(params.registry-namespace)
        - name: docker-username
          value: $(params.docker-username)
        - name: docker-password
          value: $(params.docker-password)
        - name: public-cr-username
          value: $(params.public-cr-username)
        - name: public-cr-password
          value: $(params.public-cr-password)
        - name: image-tag
          value: $(params.image-tag)
        - name: public-cr-namespace
          value: $(params.public-cr-namespace)
        - name: public-cr
          value: $(params.public-cr)
        - name: images
          value: $(params.images)
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
  finally:
    - name: cleanup-pipeline-loops
      taskRef:
        name: iks-test
      params:
        - name: apikey
          value: $(params.apikey)
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
        - name: resource-group
          value: $(params.resource-group)
        - name: org
          value: $(params.org)
        - name: region
          value: $(params.region)
        - name: space
          value: $(params.space)
        - name: test-commands
          value: |
            kubectl delete -f tekton-catalog/pipeline-loops/config || true
            kubectl delete -f tekton-catalog/pipeline-loops/examples/loop-example-basic.yaml || true
            kubectl delete -f sdk/python/tests/compiler/testdata/any_sequencer.yaml || true
            kubectl delete -f sdk/python/tests/compiler/testdata/resourceop_basic.yaml || true
            kubectl delete job --all -n default || true
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
    - name: undeploy
      taskRef:
        name: undeploy
      params:
        - name: kubernetes-cluster
          value: $(params.kubernetes-cluster)
        - name: apikey
          value: $(params.apikey)
        - name: kubeflow-ns
          value: $(params.kubeflow-ns)
      workspaces:
      - name: task-pvc
        workspace: pipeline-pvc
