# ==========================================================
# Shared Tasks
# ==========================================================
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-binaries
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: build-dir
      description: directory with makefile
      default: tekton-catalog/feature
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: build-binaries
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: BUILD_DIR
          value: $(params.build-dir)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/build-binaries.sh;
---
# Stolen and modified from https://github.com/open-toolchain/tekton-catalog/blob/master/container-registry/task-execute-in-dind.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: publish-images-to-dockerhub
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: 'https://cloud.ibm.com'
    - name: continuous-delivery-context-secret
      description: >-
        name of the configmap containing the continuous delivery pipeline
        context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: apikey
    - name: dockerhub-token-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: dockerhub-token
    - name: cluster-region
      description: >
        the ibmcloud region hosting the cluster
      default: 'us-south'
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: "default"
    - name: cluster-name
      description: >-
        name of the cluster
      default: 'iks-cluster'
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: dockerhub-username
      description: Dockerhub username
      default: ''
    - name: dockerhub-config-dir
      description: Directory to store docker's config.json in
      default: /steps
    - name: docker-registry-secret-name
      description: Name of docker-registry secret
      default: registry-dockerconfig-secret
    - name: docker-registry
      description: Image registry
      default: docker.io     
    - name: docker-namespace
      description: Image namespace
      default: ''
    - name: image-tag
      description: Image tag
      default: ''
    - name: publish-script
      description: Script to build/tag/publish/... image
      default: run.sh
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: create-docker-registry-secret
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBM_CLOUD_REGION
          value: $(params.cluster-region)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: CLUSTER_NAME
          value: $(params.cluster-name)
        - name: DOCKERHUB_USERNAME
          value: $(params.dockerhub-username)
        - name: DOCKERHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.dockerhub-token-secret-key)
        - name: DOCKER_CONFIG_DIR
          value: $(params.dockerhub-config-dir)
        - name: SECRET_NAME
          value: $(params.docker-registry-secret-name)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/iks-authenticate.sh;
          source scripts/deploy/iks/tekton-catalog/create-dockerconfig-secret.sh;
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
    - name: run-docker-commands
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: DOCKER_HOST
          value: "tcp://localhost:2376"
        # Verify TLS.
        - name: DOCKER_TLS_VERIFY
          value: "1"
        # Use the certs generated by the sidecar daemon.
        - name: DOCKER_CERT_PATH
          value: /certs/client
        # The location of the client configuration files.
        - name: DOCKER_CONFIG
          value: /steps
        - name: DOCKER_REGISTRY
          value: $(params.docker-registry)
        - name: DOCKER_NAMESPACE
          value: $(params.docker-namespace)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - "/bin/bash"
        - "-c"
      args:
        - |
          cd artifacts/$(params.directory-name);
          source $(params.publish-script)
      volumeMounts:
        - mountPath: /steps
          name: steps-volume
        - mountPath: /certs/client
          name: dind-certs
  sidecars:
    - image: docker:dind
      name: server
      securityContext:
        privileged: true
      command: ["sh", "-c"]
      env:
        # Write generated certs to the path shared with the client.
        - name: DOCKER_TLS_CERTDIR
          value: /certs
      args:
        # Set the MTU to a value that is containable in the ibmcloud calico mtu value
        # References:
        # - https://liejuntao001.medium.com/fix-docker-in-docker-network-issue-in-kubernetes-cc18c229d9e5
        # - https://cloud.ibm.com/docs/containers?topic=containers-kernel#calico-mtu
        #
        # Use a workaround to by pass virtio-fs for Continuous Delivery shared workers
        - if [[ $(df -PT /var/lib/docker | awk 'NR==2 {print $2}') == virtiofs ]]; then 
            apk add e2fsprogs && 
            truncate -s 20G /tmp/disk.img && 
            mkfs.ext4 /tmp/disk.img && 
            mount /tmp/disk.img /var/lib/docker; fi &&
          dockerd-entrypoint.sh --mtu=1400;
      volumeMounts:
        - mountPath: /certs/client
          name: dind-certs
      # Wait for the dind daemon to generate the certs it will share with the client.
      readinessProbe:
        initialDelaySeconds: 2
        periodSeconds: 1
        exec:
          command: ["ls", "/certs/client/ca.pem"]
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: dind-certs
      emptyDir: {}
# ==========================================================
# Final Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: 'https://cloud.ibm.com'
    - name: continuous-delivery-context-secret
      description: >-
        name of the configmap containing the continuous delivery pipeline
        context secrets
      default: secure-properties
    - name: kubernetes-service-apikey-secret-key
      description: >-
        field in the secret that contains the api key used to login to
        ibmcloud kubernetes service
      default: apikey
    - name: cluster-region
      description: >
        the ibmcloud region hosting the cluster
      default: 'us-south'
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
      default: "default"
    - name: cluster-name
      description: >-
        name of the cluster
      default: 'iks-cluster'
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: cleanup
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.kubernetes-service-apikey-secret-key)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: IBM_CLOUD_REGION
          value: $(params.cluster-region)
        - name: IBMCLOUD_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: CLUSTER_NAME
          value: $(params.cluster-name)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/iks-authenticate.sh;
          source scripts/deploy/iks/tekton-catalog/cleanup.sh;
# ==========================================================
# Pipeline Loops Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: setup-pipeline-loops-deploy
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: controller-image-url
      description: Controller image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/pipelineloop-controller
    - name: webhook-image-url
      description: Webhook image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/pipelineloop-webhook
    - name: image-tag
      description: Image tag SHARED by controller and webhook
      default: nightly
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: setup-deploy
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: CONTROLLER_IMAGE_URL
          value: $(params.controller-image-url)
        - name: WEBHOOK_IMAGE_URL
          value: $(params.webhook-image-url)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/setup-pipeline-loops-deploy.sh;
# ==========================================================
# Any Sequencer Tasks
# ==========================================================

# ==========================================================
# Kubectl Wrapper Tasks
# ==========================================================
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: setup-kubectl-wrapper-deploy
spec:
  params:
    - name: directory-name
      description: Repository directory
      default: kfp-tekton
    - name: kubectl-wrapper-image-url
      description: Kubectl wrapper image url of form registry/repository/image
      default: us.icr.io/kfp-tekton/kubeclient
    - name: image-tag
      description: Image tag of kubectl-wrapper image
      default: nightly
  workspaces:
  - name: task-pvc
    mountPath: /artifacts
  steps:
    - name: setup-deploy
      image: docker.io/aipipeline/pipeline-base-image:1.0
      env:
        - name: KUBECTL_WRAPPER_IMAGE_URL
          value: $(params.kubectl-wrapper-image-url)
        - name: IMAGE_TAG
          value: $(params.image-tag)
      command:
        - /bin/bash
        - '-c'
      args: 
        - >
          cd artifacts/$(params.directory-name);
          source scripts/deploy/iks/tekton-catalog/setup-kubectl-wrapper-deploy.sh;
# ==========================================================
# Imported Tasks - https://github.com/open-toolchain/tekton-catalog
# ==========================================================
# git-clone
# icr-containerize
# iks-deploy-to-kubernetes
