apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use dsl.Condition().",
      "name": "Conditional execution pipeline"}'
    pipelines.kubeflow.org/run_name: Run of [Demo] flip-coin (8ca3b)
    sidecar.istio.io/inject: "false"
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"flip-coin": [["output", "$(results.output.path)"]],
      "generate-random-number": [["output", "$(results.output.path)"]], "generate-random-number-2":
      [["output", "$(results.output.path)"]], "print": [], "print-2": [], "print-3":
      [], "print-4": []}'
    tekton.dev/input_artifacts: '{"print": [{"name": "generate-random-number-output",
      "parent_task": "generate-random-number"}], "print-2": [{"name": "generate-random-number-output",
      "parent_task": "generate-random-number"}], "print-3": [{"name": "generate-random-number-2-output",
      "parent_task": "generate-random-number-2"}], "print-4": [{"name": "generate-random-number-2-output",
      "parent_task": "generate-random-number-2"}]}'
    tekton.dev/output_artifacts: '{"flip-coin": [{"key": "artifacts/$PIPELINERUN/flip-coin/output.tgz",
      "name": "flip-coin-output", "path": "/tmp/output"}], "generate-random-number":
      [{"key": "artifacts/$PIPELINERUN/generate-random-number/output.tgz", "name":
      "generate-random-number-output", "path": "/tmp/output"}], "generate-random-number-2":
      [{"key": "artifacts/$PIPELINERUN/generate-random-number-2/output.tgz", "name":
      "generate-random-number-2-output", "path": "/tmp/output"}]}'
  creationTimestamp: "2021-03-02T23:55:04Z"
  generation: 1
  labels:
    pipeline/persistedFinalState: "true"
    pipeline/runid: 2e0efc03-6874-4357-947b-de797a6cf9dd
    tekton.dev/pipeline: conditional-execution-pipeline-2e0ef
  managedFields:
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:pipelines.kubeflow.org/pipeline_spec: {}
          f:pipelines.kubeflow.org/run_name: {}
          f:sidecar.istio.io/inject: {}
          f:tekton.dev/artifact_bucket: {}
          f:tekton.dev/artifact_endpoint: {}
          f:tekton.dev/artifact_endpoint_scheme: {}
          f:tekton.dev/artifact_items: {}
          f:tekton.dev/input_artifacts: {}
          f:tekton.dev/output_artifacts: {}
        f:labels:
          .: {}
          f:pipeline/persistedFinalState: {}
          f:pipeline/runid: {}
      f:spec:
        .: {}
        f:pipelineSpec:
          .: {}
          f:tasks: {}
        f:serviceAccountName: {}
        f:timeout: {}
    manager: apiserver
    operation: Update
    time: "2021-03-02T23:55:42Z"
  - apiVersion: tekton.dev/v1beta1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          f:tekton.dev/pipeline: {}
      f:status:
        .: {}
        f:completionTime: {}
        f:conditions: {}
        f:pipelineSpec:
          .: {}
          f:tasks: {}
        f:skippedTasks: {}
        f:startTime: {}
        f:taskRuns:
          .: {}
          f:conditional-execution-pipeline-2e0ef-condition-1-89q6q:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:results: {}
                f:steps: {}
          f:conditional-execution-pipeline-2e0ef-condition-2-24975:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:results: {}
                f:steps: {}
            f:whenExpressions: {}
          f:conditional-execution-pipeline-2e0ef-condition-3-7bfh8:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:results: {}
                f:steps: {}
            f:whenExpressions: {}
          f:conditional-execution-pipeline-2e0ef-condition-4-clrzc:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:results: {}
                f:steps: {}
          f:conditional-execution-pipeline-2e0ef-flip-coin-kb5hb:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:results: {}
                f:steps: {}
          f:conditional-execution-pipeline-2e0ef-generate-random-numb-9mssx:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskResults: {}
              f:taskSpec:
                .: {}
                f:results: {}
                f:steps: {}
          f:conditional-execution-pipeline-2e0ef-print-7zn2k:
            .: {}
            f:pipelineTaskName: {}
            f:status:
              .: {}
              f:completionTime: {}
              f:conditions: {}
              f:podName: {}
              f:startTime: {}
              f:steps: {}
              f:taskSpec:
                .: {}
                f:params: {}
                f:steps: {}
            f:whenExpressions: {}
    manager: controller
    operation: Update
    time: "2021-03-02T23:55:42Z"
  name: conditional-execution-pipeline-2e0ef
  namespace: kubeflow
  resourceVersion: "4082910"
  selfLink: /apis/tekton.dev/v1beta1/namespaces/kubeflow/pipelineruns/conditional-execution-pipeline-2e0ef
  uid: 5dc21969-b3b8-4f33-969e-195ea520b8e1
spec:
  pipelineSpec:
    tasks:
    - name: flip-coin
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; result = 'heads' if random.randint(0,1) == 0
            else 'tails'; print(result)" | tee $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
    - name: generate-random-number
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; print(random.randint($0, $1))" | tee $2
          - "0"
          - "9"
          - $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: print
      params:
      - name: generate-random-number-output
        value: $(tasks.generate-random-number.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-output
          type: string
        steps:
        - command:
          - echo
          - heads and $(inputs.params.generate-random-number-output) > 5!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-2.results.status)
        operator: in
        values:
        - "true"
    - name: print-2
      params:
      - name: generate-random-number-output
        value: $(tasks.generate-random-number.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-output
          type: string
        steps:
        - command:
          - echo
          - heads and $(inputs.params.generate-random-number-output) <= 5!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-3.results.status)
        operator: in
        values:
        - "true"
    - name: generate-random-number-2
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; print(random.randint($0, $1))" | tee $2
          - "10"
          - "19"
          - $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
    - name: print-3
      params:
      - name: generate-random-number-2-output
        value: $(tasks.generate-random-number-2.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-2-output
          type: string
        steps:
        - command:
          - echo
          - tails and $(inputs.params.generate-random-number-2-output) > 15!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-5.results.status)
        operator: in
        values:
        - "true"
    - name: print-4
      params:
      - name: generate-random-number-2-output
        value: $(tasks.generate-random-number-2.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-2-output
          type: string
        steps:
        - command:
          - echo
          - tails and $(inputs.params.generate-random-number-2-output) <= 15!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-6.results.status)
        operator: in
        values:
        - "true"
    - name: condition-1
      params:
      - name: operand1
        value: $(tasks.flip-coin.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    - name: condition-2
      params:
      - name: operand1
        value: $(tasks.generate-random-number.results.output)
      - name: operand2
        value: "5"
      - name: operator
        value: '>'
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: condition-3
      params:
      - name: operand1
        value: $(tasks.generate-random-number.results.output)
      - name: operand2
        value: "5"
      - name: operator
        value: <=
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: condition-4
      params:
      - name: operand1
        value: $(tasks.flip-coin.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    - name: condition-5
      params:
      - name: operand1
        value: $(tasks.generate-random-number-2.results.output)
      - name: operand2
        value: "15"
      - name: operator
        value: '>'
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
    - name: condition-6
      params:
      - name: operand1
        value: $(tasks.generate-random-number-2.results.output)
      - name: operand2
        value: "15"
      - name: operator
        value: <=
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
  serviceAccountName: pipeline-runner
  timeout: 0s
status:
  completionTime: "2021-03-02T23:55:42Z"
  conditions:
  - lastTransitionTime: "2021-03-02T23:55:42Z"
    message: 'Tasks Completed: 7 (Failed: 0, Cancelled 0), Skipped: 6'
    reason: Completed
    status: "True"
    type: Succeeded
  pipelineSpec:
    tasks:
    - name: flip-coin
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; result = 'heads' if random.randint(0,1) == 0
            else 'tails'; print(result)" | tee $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
    - name: generate-random-number
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; print(random.randint($0, $1))" | tee $2
          - "0"
          - "9"
          - $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: print
      params:
      - name: generate-random-number-output
        value: $(tasks.generate-random-number.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-output
          type: string
        steps:
        - command:
          - echo
          - heads and $(inputs.params.generate-random-number-output) > 5!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-2.results.status)
        operator: in
        values:
        - "true"
    - name: print-2
      params:
      - name: generate-random-number-output
        value: $(tasks.generate-random-number.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-output
          type: string
        steps:
        - command:
          - echo
          - heads and $(inputs.params.generate-random-number-output) <= 5!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-3.results.status)
        operator: in
        values:
        - "true"
    - name: generate-random-number-2
      taskSpec:
        metadata: {}
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; print(random.randint($0, $1))" | tee $2
          - "10"
          - "19"
          - $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
          resources: {}
        - env:
          - name: ARTIFACT_BUCKET
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
          - name: ARTIFACT_ENDPOINT
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
          - name: ARTIFACT_ENDPOINT_SCHEME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
          - name: ARTIFACT_ITEMS
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['tekton.dev/artifact_items']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PODNAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          - name: ARCHIVE_LOGS
            value: "false"
          - name: TRACK_ARTIFACTS
            value: "true"
          - name: STRIP_EOF
            value: "false"
          image: minio/mc:RELEASE.2020-11-25T23-04-07Z
          name: copy-artifacts
          resources: {}
          script: |
            #!/usr/bin/env sh
            push_artifact() {
                tar -cvzf $1.tgz $2
                mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
            }
            push_log() {
                cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                push_artifact main-log step-main.log
            }
            strip_eof() {
                awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
            }
            mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
            push_artifact output $(results.output.path)
      timeout: 0s
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
    - name: print-3
      params:
      - name: generate-random-number-2-output
        value: $(tasks.generate-random-number-2.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-2-output
          type: string
        steps:
        - command:
          - echo
          - tails and $(inputs.params.generate-random-number-2-output) > 15!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-5.results.status)
        operator: in
        values:
        - "true"
    - name: print-4
      params:
      - name: generate-random-number-2-output
        value: $(tasks.generate-random-number-2.results.output)
      taskSpec:
        metadata: {}
        params:
        - name: generate-random-number-2-output
          type: string
        steps:
        - command:
          - echo
          - tails and $(inputs.params.generate-random-number-2-output) <= 15!
          image: alpine:3.6
          name: main
          resources: {}
      timeout: 0s
      when:
      - input: $(tasks.condition-6.results.status)
        operator: in
        values:
        - "true"
    - name: condition-1
      params:
      - name: operand1
        value: $(tasks.flip-coin.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    - name: condition-2
      params:
      - name: operand1
        value: $(tasks.generate-random-number.results.output)
      - name: operand2
        value: "5"
      - name: operator
        value: '>'
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: condition-3
      params:
      - name: operand1
        value: $(tasks.generate-random-number.results.output)
      - name: operand2
        value: "5"
      - name: operator
        value: <=
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-1.results.status)
        operator: in
        values:
        - "true"
    - name: condition-4
      params:
      - name: operand1
        value: $(tasks.flip-coin.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    - name: condition-5
      params:
      - name: operand1
        value: $(tasks.generate-random-number-2.results.output)
      - name: operand2
        value: "15"
      - name: operator
        value: '>'
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
    - name: condition-6
      params:
      - name: operand1
        value: $(tasks.generate-random-number-2.results.output)
      - name: operand2
        value: "15"
      - name: operator
        value: <=
      taskSpec:
        metadata: {}
        params:
        - name: operand1
          type: string
        - name: operand2
          type: string
        - name: operator
          type: string
        results:
        - description: Conditional task status
          name: status
        steps:
        - image: python:alpine3.6
          name: ""
          resources: {}
          script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            status="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/status", "w")
            f.write(status)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      when:
      - input: $(tasks.condition-4.results.status)
        operator: in
        values:
        - "true"
  skippedTasks:
  - name: print-2
    whenExpressions:
    - input: "false"
      operator: in
      values:
      - "true"
  - name: generate-random-number-2
    whenExpressions:
    - input: "false"
      operator: in
      values:
      - "true"
  - name: print-3
    whenExpressions:
    - input: $(tasks.condition-5.results.status)
      operator: in
      values:
      - "true"
  - name: print-4
    whenExpressions:
    - input: $(tasks.condition-6.results.status)
      operator: in
      values:
      - "true"
  - name: condition-5
    whenExpressions:
    - input: $(tasks.condition-4.results.status)
      operator: in
      values:
      - "true"
  - name: condition-6
    whenExpressions:
    - input: $(tasks.condition-4.results.status)
      operator: in
      values:
      - "true"
  startTime: "2021-03-02T23:55:04Z"
  taskRuns:
    conditional-execution-pipeline-2e0ef-condition-1-89q6q:
      pipelineTaskName: condition-1
      status:
        completionTime: "2021-03-02T23:55:20Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:20Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-condition-1-89q6q-po-5pzt7
        startTime: "2021-03-02T23:55:13Z"
        steps:
        - container: step-unnamed-0
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: unnamed-0
          terminated:
            containerID: containerd://30bbf40afdc74ff17d421e870d7e513fee54ebca067f72cb5a6f909d0ad15249
            exitCode: 0
            finishedAt: "2021-03-02T23:55:19Z"
            message: '[{"key":"status","value":"true","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:19Z"
        taskResults:
        - name: status
          value: "true"
        taskSpec:
          params:
          - name: operand1
            type: string
          - name: operand2
            type: string
          - name: operator
            type: string
          results:
          - description: Conditional task status
            name: status
          steps:
          - image: python:alpine3.6
            name: ""
            resources: {}
            script: |-
              python -c 'import sys
              input1=str.rstrip(sys.argv[1])
              input2=str.rstrip(sys.argv[2])
              try:
                input1=int(input1)
                input2=int(input2)
              except:
                input1=str(input1)
              status="true" if (input1 $(inputs.params.operator) input2) else "false"
              f = open("/tekton/results/status", "w")
              f.write(status)
              f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    conditional-execution-pipeline-2e0ef-condition-2-24975:
      pipelineTaskName: condition-2
      status:
        completionTime: "2021-03-02T23:55:36Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:36Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-condition-2-24975-po-8b2fl
        startTime: "2021-03-02T23:55:29Z"
        steps:
        - container: step-unnamed-0
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: unnamed-0
          terminated:
            containerID: containerd://3242ff704e4048e350834605aefd9384bb2edcea7e1d34ea5d9ad6cac40c2fd5
            exitCode: 0
            finishedAt: "2021-03-02T23:55:35Z"
            message: '[{"key":"status","value":"true","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:35Z"
        taskResults:
        - name: status
          value: "true"
        taskSpec:
          params:
          - name: operand1
            type: string
          - name: operand2
            type: string
          - name: operator
            type: string
          results:
          - description: Conditional task status
            name: status
          steps:
          - image: python:alpine3.6
            name: ""
            resources: {}
            script: |-
              python -c 'import sys
              input1=str.rstrip(sys.argv[1])
              input2=str.rstrip(sys.argv[2])
              try:
                input1=int(input1)
                input2=int(input2)
              except:
                input1=str(input1)
              status="true" if (input1 $(inputs.params.operator) input2) else "false"
              f = open("/tekton/results/status", "w")
              f.write(status)
              f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      whenExpressions:
      - input: "true"
        operator: in
        values:
        - "true"
    conditional-execution-pipeline-2e0ef-condition-3-7bfh8:
      pipelineTaskName: condition-3
      status:
        completionTime: "2021-03-02T23:55:36Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:36Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-condition-3-7bfh8-po-xvq5b
        startTime: "2021-03-02T23:55:30Z"
        steps:
        - container: step-unnamed-0
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: unnamed-0
          terminated:
            containerID: containerd://577b2f8ef61ca563cf93cc56f22d68b1e57d79edb31c97e1df0ef216381c2784
            exitCode: 0
            finishedAt: "2021-03-02T23:55:35Z"
            message: '[{"key":"status","value":"false","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:35Z"
        taskResults:
        - name: status
          value: "false"
        taskSpec:
          params:
          - name: operand1
            type: string
          - name: operand2
            type: string
          - name: operator
            type: string
          results:
          - description: Conditional task status
            name: status
          steps:
          - image: python:alpine3.6
            name: ""
            resources: {}
            script: |-
              python -c 'import sys
              input1=str.rstrip(sys.argv[1])
              input2=str.rstrip(sys.argv[2])
              try:
                input1=int(input1)
                input2=int(input2)
              except:
                input1=str(input1)
              status="true" if (input1 $(inputs.params.operator) input2) else "false"
              f = open("/tekton/results/status", "w")
              f.write(status)
              f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
      whenExpressions:
      - input: "true"
        operator: in
        values:
        - "true"
    conditional-execution-pipeline-2e0ef-condition-4-clrzc:
      pipelineTaskName: condition-4
      status:
        completionTime: "2021-03-02T23:55:19Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:19Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-condition-4-clrzc-po-jr7m7
        startTime: "2021-03-02T23:55:14Z"
        steps:
        - container: step-unnamed-0
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: unnamed-0
          terminated:
            containerID: containerd://14d1795b9eb5949d1637000af5b481be030e752eb835d9cf327ccb044154ecb0
            exitCode: 0
            finishedAt: "2021-03-02T23:55:18Z"
            message: '[{"key":"status","value":"false","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:18Z"
        taskResults:
        - name: status
          value: "false"
        taskSpec:
          params:
          - name: operand1
            type: string
          - name: operand2
            type: string
          - name: operator
            type: string
          results:
          - description: Conditional task status
            name: status
          steps:
          - image: python:alpine3.6
            name: ""
            resources: {}
            script: |-
              python -c 'import sys
              input1=str.rstrip(sys.argv[1])
              input2=str.rstrip(sys.argv[2])
              try:
                input1=int(input1)
                input2=int(input2)
              except:
                input1=str(input1)
              status="true" if (input1 $(inputs.params.operator) input2) else "false"
              f = open("/tekton/results/status", "w")
              f.write(status)
              f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
    conditional-execution-pipeline-2e0ef-flip-coin-kb5hb:
      pipelineTaskName: flip-coin
      status:
        completionTime: "2021-03-02T23:55:13Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:13Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-flip-coin-kb5hb-pod-ldmlb
        startTime: "2021-03-02T23:55:04Z"
        steps:
        - container: step-main
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: main
          terminated:
            containerID: containerd://baf29ed2ecedc108a7d6bfd33a4cd8ea31b86e1c25958d370af791255c1200ab
            exitCode: 0
            finishedAt: "2021-03-02T23:55:09Z"
            message: '[{"key":"output","value":"heads\n","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:09Z"
        - container: step-copy-artifacts
          imageID: docker.io/minio/mc@sha256:bf85c57cdfcc3db345b99965579336a2f66f83fdb7e0e68c3cda5bd8b3ff1107
          name: copy-artifacts
          terminated:
            containerID: containerd://b2efbd6ff19773e0e2b252dbbb621cd0d0e965620ed5eaa3cfad621d37f5a422
            exitCode: 0
            finishedAt: "2021-03-02T23:55:12Z"
            message: '[{"key":"output","value":"heads\n","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:09Z"
        taskResults:
        - name: output
          value: |
            heads
        taskSpec:
          results:
          - description: /tmp/output
            name: output
          steps:
          - args:
            - python -c "import random; result = 'heads' if random.randint(0,1) ==
              0 else 'tails'; print(result)" | tee $(results.output.path)
            command:
            - sh
            - -c
            image: python:alpine3.6
            name: main
            resources: {}
          - env:
            - name: ARTIFACT_BUCKET
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
            - name: ARTIFACT_ENDPOINT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
            - name: ARTIFACT_ENDPOINT_SCHEME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
            - name: ARTIFACT_ITEMS
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_items']
            - name: PIPELINETASK
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tekton.dev/pipelineTask']
            - name: PIPELINERUN
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tekton.dev/pipelineRun']
            - name: PODNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: accesskey
                  name: mlpipeline-minio-artifact
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: secretkey
                  name: mlpipeline-minio-artifact
            - name: ARCHIVE_LOGS
              value: "false"
            - name: TRACK_ARTIFACTS
              value: "true"
            - name: STRIP_EOF
              value: "false"
            image: minio/mc:RELEASE.2020-11-25T23-04-07Z
            name: copy-artifacts
            resources: {}
            script: |
              #!/usr/bin/env sh
              push_artifact() {
                  tar -cvzf $1.tgz $2
                  mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
              }
              push_log() {
                  cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                  push_artifact main-log step-main.log
              }
              strip_eof() {
                  awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
              }
              mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
              push_artifact output $(results.output.path)
    conditional-execution-pipeline-2e0ef-generate-random-numb-9mssx:
      pipelineTaskName: generate-random-number
      status:
        completionTime: "2021-03-02T23:55:29Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:29Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-generate-random-numb-q9qmk
        startTime: "2021-03-02T23:55:20Z"
        steps:
        - container: step-main
          imageID: docker.io/library/python@sha256:766a961bf699491995cc29e20958ef11fd63741ff41dcc70ec34355b39d52971
          name: main
          terminated:
            containerID: containerd://2f122c2a043b86da0c4134c06f2c7d8366bfe8f05c278d0e7070974ebe348651
            exitCode: 0
            finishedAt: "2021-03-02T23:55:26Z"
            message: '[{"key":"output","value":"8\n","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:26Z"
        - container: step-copy-artifacts
          imageID: docker.io/minio/mc@sha256:bf85c57cdfcc3db345b99965579336a2f66f83fdb7e0e68c3cda5bd8b3ff1107
          name: copy-artifacts
          terminated:
            containerID: containerd://c988a3d9822bc4ede06db681cfc07bee3e938efd72ec356dcc1ad8ccb1f0cfa4
            exitCode: 0
            finishedAt: "2021-03-02T23:55:28Z"
            message: '[{"key":"output","value":"8\n","type":"TaskRunResult"}]'
            reason: Completed
            startedAt: "2021-03-02T23:55:26Z"
        taskResults:
        - name: output
          value: |
            8
        taskSpec:
          results:
          - description: /tmp/output
            name: output
          steps:
          - args:
            - python -c "import random; print(random.randint($0, $1))" | tee $2
            - "0"
            - "9"
            - $(results.output.path)
            command:
            - sh
            - -c
            image: python:alpine3.6
            name: main
            resources: {}
          - env:
            - name: ARTIFACT_BUCKET
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_bucket']
            - name: ARTIFACT_ENDPOINT
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_endpoint']
            - name: ARTIFACT_ENDPOINT_SCHEME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_endpoint_scheme']
            - name: ARTIFACT_ITEMS
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['tekton.dev/artifact_items']
            - name: PIPELINETASK
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tekton.dev/pipelineTask']
            - name: PIPELINERUN
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tekton.dev/pipelineRun']
            - name: PODNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: accesskey
                  name: mlpipeline-minio-artifact
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: secretkey
                  name: mlpipeline-minio-artifact
            - name: ARCHIVE_LOGS
              value: "false"
            - name: TRACK_ARTIFACTS
              value: "true"
            - name: STRIP_EOF
              value: "false"
            image: minio/mc:RELEASE.2020-11-25T23-04-07Z
            name: copy-artifacts
            resources: {}
            script: |
              #!/usr/bin/env sh
              push_artifact() {
                  tar -cvzf $1.tgz $2
                  mc cp $1.tgz storage/$ARTIFACT_BUCKET/artifacts/$PIPELINERUN/$PIPELINETASK/$1.tgz
              }
              push_log() {
                  cat /var/log/containers/$PODNAME*$NAMESPACE*step-main*.log > step-main.log
                  push_artifact main-log step-main.log
              }
              strip_eof() {
                  awk 'NF' $2 | head -c -1 > $1_temp_save && cp $1_temp_save $2
              }
              mc config host add storage ${ARTIFACT_ENDPOINT_SCHEME}${ARTIFACT_ENDPOINT} $AWS_ACCESS_KEY_ID $AWS_SECRET_ACCESS_KEY
              push_artifact output $(results.output.path)
    conditional-execution-pipeline-2e0ef-print-7zn2k:
      pipelineTaskName: print
      status:
        completionTime: "2021-03-02T23:55:42Z"
        conditions:
        - lastTransitionTime: "2021-03-02T23:55:42Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: conditional-execution-pipeline-2e0ef-print-7zn2k-pod-bmmht
        startTime: "2021-03-02T23:55:37Z"
        steps:
        - container: step-main
          imageID: docker.io/library/alpine@sha256:66790a2b79e1ea3e1dabac43990c54aca5d1ddf268d9a5a0285e4167c8b24475
          name: main
          terminated:
            containerID: containerd://7c5de0232864b5419dbb2b93a44fc8f0bd282081f3d90e763f0f6ff216c5b7bf
            exitCode: 0
            finishedAt: "2021-03-02T23:55:41Z"
            reason: Completed
            startedAt: "2021-03-02T23:55:41Z"
        taskSpec:
          params:
          - name: generate-random-number-output
            type: string
          steps:
          - command:
            - echo
            - heads and $(inputs.params.generate-random-number-output) > 5!
            image: alpine:3.6
            name: main
            resources: {}
      whenExpressions:
      - input: "true"
        operator: in
        values:
        - "true"
