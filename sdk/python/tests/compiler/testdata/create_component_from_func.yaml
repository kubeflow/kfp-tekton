# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: create-component-from-function
  annotations:
    tekton.dev/output_artifacts: '{"get-subdirectory": [{"key": "artifacts/$PIPELINERUN/get-subdirectory/Subdir.tgz",
      "name": "get-subdirectory-Subdir", "path": "/tmp/outputs/Subdir/data"}], "list-items":
      [{"key": "artifacts/$PIPELINERUN/list-items/Items.tgz", "name": "list-items-Items",
      "path": "/tmp/outputs/Items/data"}], "list-items-2": [{"key": "artifacts/$PIPELINERUN/list-items-2/Items.tgz",
      "name": "list-items-2-Items", "path": "/tmp/outputs/Items/data"}], "produce-dir-with-files-python-op":
      [{"key": "artifacts/$PIPELINERUN/produce-dir-with-files-python-op/output_dir.tgz",
      "name": "produce-dir-with-files-python-op-output_dir", "path": "/tmp/outputs/output_dir/data"}]}'
    tekton.dev/input_artifacts: '{"get-subdirectory": [{"name": "produce-dir-with-files-python-op-output_dir",
      "parent_task": "produce-dir-with-files-python-op"}], "list-items": [{"name":
      "get-subdirectory-Subdir", "parent_task": "get-subdirectory"}], "list-items-2":
      [{"name": "get-subdirectory-Subdir", "parent_task": "get-subdirectory"}, {"name":
      "produce-dir-with-files-python-op-output_dir", "parent_task": "produce-dir-with-files-python-op"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"get-subdirectory": [["Subdir", "$(workspaces.get-subdirectory.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Subdir"]],
      "list-items": [["Items", "$(results.Items.path)"]], "list-items-2": [["Items",
      "$(results.Items.path)"]], "produce-dir-with-files-python-op": [["output_dir",
      "$(workspaces.produce-dir-with-files-python-op.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/output_dir"]]}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"name": "create-component-from-function"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  pipelineSpec:
    tasks:
    - name: produce-dir-with-files-python-op
      taskSpec:
        steps:
        - name: main
          args:
          - --num-files
          - '15'
          - --output-dir
          - $(workspaces.produce-dir-with-files-python-op.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/output_dir
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def _make_parent_dirs_and_return_path(file_path: str):
                import os
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                return file_path

            def produce_dir_with_files_python_op(output_dir_path, num_files = 10):
                import os
                os.makedirs(os.path.join(output_dir_path, 'subdir'), exist_ok=True)
                for i in range(num_files):
                    file_path = os.path.join(output_dir_path, 'subdir', str(i) + '.txt')
                    with open(file_path, 'w') as f:
                        f.write(str(i))

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce dir with files python op', description='')
            _parser.add_argument("--num-files", dest="num_files", type=int, required=False, default=argparse.SUPPRESS)
            _parser.add_argument("--output-dir", dest="output_dir_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = produce_dir_with_files_python_op(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        - image: busybox
          name: output-taskrun-name
          command:
          - sh
          - -ec
          - echo -n "$(context.taskRun.name)" > "$(results.taskrun-name.path)"
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact $(workspaces.produce-dir-with-files-python-op.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/output_dir $(results.output-dir.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: output-dir
          type: string
          description: /tmp/outputs/output_dir/data
        - name: taskrun-name
          type: string
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce dir with
              files python op", "outputs": [{"name": "output_dir"}], "version": "Produce
              dir with files python op@sha256=402b8d5bfcc589729850713deab06f2a3bb111baf371a138147b7516c8a2f41c"}'
            tekton.dev/template: ''
        workspaces:
        - name: produce-dir-with-files-python-op
      timeout: 525600m
      workspaces:
      - name: produce-dir-with-files-python-op
        workspace: create-component-from-function
    - name: get-subdirectory
      params:
      - name: produce-dir-with-files-python-op-trname
        value: $(tasks.produce-dir-with-files-python-op.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -ex
          - -c
          - |
            mkdir -p "$(dirname "$2")"
            cp -r "$0/$1" "$2"
          - $(workspaces.get-subdirectory.path)/artifacts/$ORIG_PR_NAME/$(params.produce-dir-with-files-python-op-trname)/output_dir
          - subdir
          - $(workspaces.get-subdirectory.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Subdir
          image: alpine
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        - image: busybox
          name: output-taskrun-name
          command:
          - sh
          - -ec
          - echo -n "$(context.taskRun.name)" > "$(results.taskrun-name.path)"
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact $(workspaces.get-subdirectory.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Subdir $(results.Subdir.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-dir-with-files-python-op-trname
        results:
        - name: Subdir
          type: string
          description: /tmp/outputs/Subdir/data
        - name: taskrun-name
          type: string
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Get subdirectory",
              "outputs": [{"name": "Subdir", "type": "Directory"}], "version": "Get
              subdirectory@sha256=47f3ed80f84f97d86349edfe62e0aeae9c64b336250101ba3da09648c373b4c7"}'
            tekton.dev/template: ''
        workspaces:
        - name: get-subdirectory
      timeout: 525600m
      workspaces:
      - name: get-subdirectory
        workspace: create-component-from-function
      runAfter:
      - produce-dir-with-files-python-op
    - name: list-items
      params:
      - name: get-subdirectory-trname
        value: $(tasks.get-subdirectory.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -ex
          - -c
          - |
            mkdir -p "$(dirname "$1")"
            #ls --almost-all --recursive "$0" > "$1"
            ls -A -R "$0" > "$1"
          - $(workspaces.list-items.path)/artifacts/$ORIG_PR_NAME/$(params.get-subdirectory-trname)/Subdir
          - $(results.Items.path)
          image: alpine
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: get-subdirectory-trname
        results:
        - name: Items
          type: string
          description: /tmp/outputs/Items/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "List items",
              "outputs": [{"name": "Items"}], "version": "List items@sha256=2c0fc3f181a67696494ed58c0b42e3e37ecbd7a8bce591eb0c7d6b7b38af8952"}'
            tekton.dev/template: ''
        workspaces:
        - name: list-items
      timeout: 525600m
      workspaces:
      - name: list-items
        workspace: create-component-from-function
      runAfter:
      - get-subdirectory
    - name: list-items-2
      params:
      - name: get-subdirectory-trname
        value: $(tasks.get-subdirectory.results.taskrun-name)
      - name: produce-dir-with-files-python-op-trname
        value: $(tasks.produce-dir-with-files-python-op.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -ex
          - -c
          - |
            mkdir -p "$(dirname "$2")"
            ls -A -R "$0" > "$2"
            ls -A -R "$1" >> "$2"
          - $(workspaces.list-items-2.path)/artifacts/$ORIG_PR_NAME/$(params.get-subdirectory-trname)/Subdir
          - $(workspaces.list-items-2.path)/artifacts/$ORIG_PR_NAME/$(params.produce-dir-with-files-python-op-trname)/output_dir
          - $(results.Items.path)
          image: alpine
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: get-subdirectory-trname
        - name: produce-dir-with-files-python-op-trname
        results:
        - name: Items
          type: string
          description: /tmp/outputs/Items/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "List items 2",
              "outputs": [{"name": "Items"}], "version": "List items 2@sha256=dc610eb161d4dc2d26801bab4f5ab95b32077d840f2c8e130cd29ec0e94241f1"}'
            tekton.dev/template: ''
        workspaces:
        - name: list-items-2
      timeout: 525600m
      workspaces:
      - name: list-items-2
        workspace: create-component-from-function
      runAfter:
      - get-subdirectory
      - produce-dir-with-files-python-op
    workspaces:
    - name: create-component-from-function
  timeout: 525600m
  workspaces:
  - name: create-component-from-function
    volumeClaimTemplate:
      spec:
        storageClassName: kfp-csi-s3
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 2Gi
