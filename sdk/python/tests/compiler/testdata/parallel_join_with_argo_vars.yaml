# Copyright 2020 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Download two messages
      in parallel and prints the concatenated result and use Argo variables.", "inputs":
      [{"default": "gs://ml-pipeline-playground/shakespeare1.txt", "name": "url1",
      "optional": true}, {"default": "gs://ml-pipeline-playground/shakespeare2.txt",
      "name": "url2", "optional": true}], "name": "Parallel pipeline with argo vars"}'
    sidecar.istio.io/inject: 'false'
    tekton.dev/input_artifacts: '{"echo": [{"name": "gcs-download-2-data", "parent_task":
      "gcs-download-2"}, {"name": "gcs-download-data", "parent_task": "gcs-download"}]}'
    tekton.dev/output_artifacts: '{"gcs-download": [{"name": "gcs-download-data",
      "path": "/tmp/results.txt"}], "gcs-download-2": [{"name": "gcs-download-2-data",
      "path": "/tmp/results.txt"}]}'
  name: parallel-pipeline-with-argo-vars
spec:
  params:
  - name: url1
    value: gs://ml-pipeline-playground/shakespeare1.txt
  - name: url2
    value: gs://ml-pipeline-playground/shakespeare2.txt
  pipelineSpec:
    params:
    - default: gs://ml-pipeline-playground/shakespeare1.txt
      name: url1
    - default: gs://ml-pipeline-playground/shakespeare2.txt
      name: url2
    tasks:
    - name: gcs-download
      params:
      - name: url1
        value: $(params.url1)
      taskSpec:
        params:
        - name: url1
        results:
        - description: /tmp/results.txt
          name: data
        steps:
        - args:
          - gsutil cat $0 | tee $1
          - $(inputs.params.url1)
          - $(results.data.path)
          command:
          - sh
          - -c
          image: google/cloud-sdk:279.0.0
          name: main
        - env:
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          image: minio/mc
          name: copy-artifacts
          script: '#!/usr/bin/env sh

            mc config host add storage http://minio-service.$NAMESPACE:9000 $AWS_ACCESS_KEY_ID
            $AWS_SECRET_ACCESS_KEY

            tar -cvzf data.tgz $(results.data.path)

            mc cp data.tgz storage/mlpipeline/artifacts/$PIPELINERUN/$PIPELINETASK/data.tgz

            '
    - name: gcs-download-2
      params:
      - name: url2
        value: $(params.url2)
      taskSpec:
        params:
        - name: url2
        results:
        - description: /tmp/results.txt
          name: data
        steps:
        - args:
          - gsutil cat $0 | tee $1
          - $(inputs.params.url2)
          - $(results.data.path)
          command:
          - sh
          - -c
          image: google/cloud-sdk:279.0.0
          name: main
        - env:
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          image: minio/mc
          name: copy-artifacts
          script: '#!/usr/bin/env sh

            mc config host add storage http://minio-service.$NAMESPACE:9000 $AWS_ACCESS_KEY_ID
            $AWS_SECRET_ACCESS_KEY

            tar -cvzf data.tgz $(results.data.path)

            mc cp data.tgz storage/mlpipeline/artifacts/$PIPELINERUN/$PIPELINETASK/data.tgz

            '
    - name: echo
      params:
      - name: gcs-download-2-data
        value: $(tasks.gcs-download-2.results.data)
      - name: gcs-download-data
        value: $(tasks.gcs-download.results.data)
      taskSpec:
        params:
        - name: gcs-download-2-data
        - name: gcs-download-data
        steps:
        - args:
          - 'echo "Text 1: $0"; echo "Text 2: $1"; echo "$(inputs.params.gcs-download-data)"'
          - $(inputs.params.gcs-download-data)
          - $(inputs.params.gcs-download-2-data)
          command:
          - sh
          - -c
          image: library/bash:4.4.23
          name: main
