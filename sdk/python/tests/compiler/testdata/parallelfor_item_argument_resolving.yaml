# Copyright 2021-2023 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: parallelfor-item-argument-resolving
  annotations:
    tekton.dev/output_artifacts: '{"produce-list-of-dicts": [{"key": "artifacts/$PIPELINERUN/produce-list-of-dicts/Output.tgz",
      "name": "produce-list-of-dicts-Output", "path": "/tmp/outputs/Output/data"}],
      "produce-list-of-ints": [{"key": "artifacts/$PIPELINERUN/produce-list-of-ints/Output.tgz",
      "name": "produce-list-of-ints-Output", "path": "/tmp/outputs/Output/data"}],
      "produce-list-of-strings": [{"key": "artifacts/$PIPELINERUN/produce-list-of-strings/Output.tgz",
      "name": "produce-list-of-strings-Output", "path": "/tmp/outputs/Output/data"}],
      "produce-str": [{"key": "artifacts/$PIPELINERUN/produce-str/Output.tgz", "name":
      "produce-str-Output", "path": "/tmp/outputs/Output/data"}]}'
    tekton.dev/input_artifacts: '{"consume": [{"name": "produce-list-of-strings-Output",
      "parent_task": "produce-list-of-strings"}], "consume-3": [{"name": "produce-str-Output",
      "parent_task": "produce-str"}], "consume-4": [{"name": "produce-list-of-ints-Output",
      "parent_task": "produce-list-of-ints"}], "consume-6": [{"name": "produce-list-of-dicts-Output",
      "parent_task": "produce-list-of-dicts"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"consume": [], "consume-2": [], "consume-3": [],
      "consume-4": [], "consume-5": [], "consume-6": [], "consume-7": [], "produce-list-of-dicts":
      [["Output", "$(results.Output.path)"]], "produce-list-of-ints": [["Output",
      "$(results.Output.path)"]], "produce-list-of-strings": [["Output", "$(results.Output.path)"]],
      "produce-str": [["Output", "$(results.Output.path)"]]}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"name": "parallelfor-item-argument-resolving"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  pipelineSpec:
    tasks:
    - name: produce-str
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(results.Output.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_str():
                return "Hello"

            def _serialize_str(str_value: str) -> str:
                if not isinstance(str_value, str):
                    raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                        str(str_value), str(type(str_value))))
                return str_value

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce str', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_str(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_str,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce str",
              "outputs": [{"name": "Output", "type": "String"}], "version": "Produce
              str@sha256=56c6c051642ecf0f894b85f3ab46a6d6ac43e3576fe63d086ad1695f70663d84"}'
    - name: produce-list-of-strings
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(results.Output.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_list_of_strings():
                return ["a", "z"]

            def _serialize_json(obj) -> str:
                if isinstance(obj, str):
                    return obj
                import json

                def default_serializer(obj):
                    if hasattr(obj, 'to_struct'):
                        return obj.to_struct()
                    else:
                        raise TypeError(
                            "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                            % obj.__class__.__name__)

                return json.dumps(obj, default=default_serializer, sort_keys=True)

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce list of strings', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_list_of_strings(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_json,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce list
              of strings", "outputs": [{"name": "Output", "type": "JsonArray"}], "version":
              "Produce list of strings@sha256=9400c06cbd8392297077b6f2c1fe3fc453e8a5676999bce8c307674c7e0bc9c6"}'
    - name: produce-list-of-ints
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(results.Output.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_list_of_ints():
                return [1234567890, 987654321]

            def _serialize_json(obj) -> str:
                if isinstance(obj, str):
                    return obj
                import json

                def default_serializer(obj):
                    if hasattr(obj, 'to_struct'):
                        return obj.to_struct()
                    else:
                        raise TypeError(
                            "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                            % obj.__class__.__name__)

                return json.dumps(obj, default=default_serializer, sort_keys=True)

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce list of ints', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_list_of_ints(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_json,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce list
              of ints", "outputs": [{"name": "Output", "type": "JsonArray"}], "version":
              "Produce list of ints@sha256=35df856c301c60ddd768541bf53ee02243b70171db26d1c6bb36c3bf397c7c28"}'
    - name: produce-list-of-dicts
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(results.Output.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_list_of_dicts():
                return [{"aaa": "aaa1", "bbb": "bbb1"}, {"aaa": "aaa2", "bbb": "bbb2"}]

            def _serialize_json(obj) -> str:
                if isinstance(obj, str):
                    return obj
                import json

                def default_serializer(obj):
                    if hasattr(obj, 'to_struct'):
                        return obj.to_struct()
                    else:
                        raise TypeError(
                            "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                            % obj.__class__.__name__)

                return json.dumps(obj, default=default_serializer, sort_keys=True)

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce list of dicts', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_list_of_dicts(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_json,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce list
              of dicts", "outputs": [{"name": "Output", "type": "JsonArray"}], "version":
              "Produce list of dicts@sha256=e731938bd64c449aa58656e82a0ef231eb3e8d5bea0e15e6b022d554b44cff48"}'
    - runAfter:
      - produce-list-of-strings
      - produce-str
      name: parallelfor-item-argument-resolving-for-loop-1
      params:
      - name: produce-list-of-strings-Output
        value: $(tasks.produce-list-of-strings.results.Output)
      - name: produce-list-of-strings-Output-loop-item
        value: $(tasks.produce-list-of-strings.results.Output)
      - name: produce-str-Output
        value: $(tasks.produce-str.results.Output)
      taskSpec:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: PipelineLoop
        spec:
          pipelineSpec:
            params:
            - name: produce-list-of-strings-Output
              type: string
            - name: produce-list-of-strings-Output-loop-item
              type: string
            - name: produce-str-Output
              type: string
            tasks:
            - name: consume
              params:
              - name: produce-list-of-strings-Output
                value: $(params.produce-list-of-strings-Output)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-strings-Output)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-strings-Output
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
            - name: consume-2
              params:
              - name: produce-list-of-strings-Output-loop-item
                value: $(params.produce-list-of-strings-Output-loop-item)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-strings-Output-loop-item)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-strings-Output-loop-item
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
            - name: consume-3
              params:
              - name: produce-str-Output
                value: $(params.produce-str-Output)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-str-Output)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-str-Output
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
          iterateParam: produce-list-of-strings-Output-loop-item
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
    - runAfter:
      - produce-list-of-ints
      name: parallelfor-item-argument-resolving-for-loop-2
      params:
      - name: produce-list-of-ints-Output
        value: $(tasks.produce-list-of-ints.results.Output)
      - name: produce-list-of-ints-Output-loop-item
        value: $(tasks.produce-list-of-ints.results.Output)
      taskSpec:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: PipelineLoop
        spec:
          pipelineSpec:
            params:
            - name: produce-list-of-ints-Output
              type: string
            - name: produce-list-of-ints-Output-loop-item
              type: string
            tasks:
            - name: consume-4
              params:
              - name: produce-list-of-ints-Output
                value: $(params.produce-list-of-ints-Output)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-ints-Output)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-ints-Output
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
            - name: consume-5
              params:
              - name: produce-list-of-ints-Output-loop-item
                value: $(params.produce-list-of-ints-Output-loop-item)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-ints-Output-loop-item)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-ints-Output-loop-item
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
          iterateParam: produce-list-of-ints-Output-loop-item
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
    - runAfter:
      - produce-list-of-dicts
      name: parallelfor-item-argument-resolving-for-loop-3
      params:
      - name: produce-list-of-dicts-Output
        value: $(tasks.produce-list-of-dicts.results.Output)
      - name: produce-list-of-dicts-Output-loop-item
        value: $(tasks.produce-list-of-dicts.results.Output)
      taskSpec:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: PipelineLoop
        spec:
          pipelineSpec:
            params:
            - name: produce-list-of-dicts-Output
              type: string
            - name: produce-list-of-dicts-Output-loop-item-subvar-aaa
              type: string
            tasks:
            - name: consume-6
              params:
              - name: produce-list-of-dicts-Output
                value: $(params.produce-list-of-dicts-Output)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-dicts-Output)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-dicts-Output
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
            - name: consume-7
              params:
              - name: produce-list-of-dicts-Output-loop-item-subvar-aaa
                value: $(params.produce-list-of-dicts-Output-loop-item-subvar-aaa)
              taskSpec:
                steps:
                - name: main
                  args:
                  - --param1
                  - $(inputs.params.produce-list-of-dicts-Output-loop-item-subvar-aaa)
                  command:
                  - sh
                  - -ec
                  - |
                    program_path=$(mktemp)
                    printf "%s" "$0" > "$program_path"
                    python3 -u "$program_path" "$@"
                  - |
                    def consume(param1):
                        print(param1)

                    import argparse
                    _parser = argparse.ArgumentParser(prog='Consume', description='')
                    _parser.add_argument("--param1", dest="param1", type=str, required=True, default=argparse.SUPPRESS)
                    _parsed_args = vars(_parser.parse_args())

                    _outputs = consume(**_parsed_args)
                  image: python:3.7
                params:
                - name: produce-list-of-dicts-Output-loop-item-subvar-aaa
                  type: string
                metadata:
                  labels:
                    pipelines.kubeflow.org/cache_enabled: "true"
                  annotations:
                    pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume",
                      "outputs": [], "version": "Consume@sha256=81237bf045292d631ce2f9d982637189181ba23abe552f8bf048b87322d6b5da"}'
          iterateParam: produce-list-of-dicts-Output-loop-item
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
