# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: flip-coin-example-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"flip": [{"key": "artifacts/$PIPELINERUN/flip/output_value.tgz",
      "name": "flip-output_value", "path": "/tmp/output"}], "flip-again": [{"key":
      "artifacts/$PIPELINERUN/flip-again/output_value.tgz", "name": "flip-again-output_value",
      "path": "/tmp/output"}], "flip3": [{"key": "artifacts/$PIPELINERUN/flip3/output_value.tgz",
      "name": "flip3-output_value", "path": "/tmp/output"}]}'
    tekton.dev/input_artifacts: '{"print1": [{"name": "flip-again-output_value", "parent_task":
      "flip-again"}], "print2": [{"name": "flip-output_value", "parent_task": "flip"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"flip": [["output_value", "$(results.output-value.path)"]],
      "flip-again": [["output_value", "$(results.output-value.path)"]], "flip3": [["output_value",
      "$(results.output-value.path)"]], "print1": [], "print2": []}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use dsl.Condition.",
      "inputs": [{"default": "heads", "name": "forced_result1", "optional": true,
      "type": "String"}, {"default": "tails", "name": "forced_result2", "optional":
      true, "type": "String"}, {"default": "heads", "name": "forced_result3", "optional":
      true, "type": "String"}], "name": "Flip Coin Example Pipeline"}'
spec:
  params:
  - name: forced_result1
    value: heads
  - name: forced_result2
    value: tails
  - name: forced_result3
    value: heads
  pipelineSpec:
    params:
    - name: forced_result1
      default: heads
    - name: forced_result2
      default: tails
    - name: forced_result3
      default: heads
    tasks:
    - name: flip
      params:
      - name: forced_result1
        value: $(params.forced_result1)
      taskSpec:
        steps:
        - name: main
          args:
          - python -c "import random; import sys; forced_result = '$(inputs.params.forced_result1)';
            result = 'heads' if random.randint(0,1) == 0 else 'tails'; print(forced_result)
            if (forced_result == 'heads' or forced_result == 'tails') else print(result)"
            | tee $(results.output-value.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
        params:
        - name: forced_result1
        results:
        - name: output-value
          description: /tmp/output
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton.dev/template: ''
      timeout: 0s
    - name: flip3
      params:
      - name: forced_result3
        value: $(params.forced_result3)
      taskSpec:
        steps:
        - name: main
          args:
          - python -c "import random; import sys; forced_result = '$(inputs.params.forced_result3)';
            result = 'heads' if random.randint(0,1) == 0 else 'tails'; print(forced_result)
            if (forced_result == 'heads' or forced_result == 'tails') else print(result)"
            | tee $(results.output-value.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
        params:
        - name: forced_result3
        results:
        - name: output-value
          description: /tmp/output
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton.dev/template: ''
      timeout: 0s
    - name: flip-again
      params:
      - name: forced_result2
        value: $(params.forced_result2)
      taskSpec:
        steps:
        - name: main
          args:
          - python -c "import random; import sys; forced_result = '$(inputs.params.forced_result2)';
            result = 'heads' if random.randint(0,1) == 0 else 'tails'; print(forced_result)
            if (forced_result == 'heads' or forced_result == 'tails') else print(result)"
            | tee $(results.output-value.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
        params:
        - name: forced_result2
        results:
        - name: output-value
          description: /tmp/output
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-1.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 0s
    - name: print1
      params:
      - name: flip-again-output_value
        value: $(tasks.flip-again.results.output-value)
      taskSpec:
        steps:
        - name: main
          command:
          - echo
          - $(inputs.params.flip-again-output_value)
          image: alpine:3.6
        params:
        - name: flip-again-output_value
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-3.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 0s
    - name: print2
      params:
      - name: flip-output_value
        value: $(tasks.flip.results.output-value)
      taskSpec:
        steps:
        - name: main
          command:
          - echo
          - $(inputs.params.flip-output_value)
          image: alpine:3.6
        params:
        - name: flip-output_value
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-4.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 0s
    - name: condition-1
      params:
      - name: operand1
        value: $(tasks.flip.results.output-value)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
    - name: condition-2
      params:
      - name: operand1
        value: $(tasks.flip-again.results.output-value)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
      when:
      - input: $(tasks.condition-1.results.outcome)
        operator: in
        values:
        - "true"
    - name: condition-3
      params:
      - name: operand1
        value: $(tasks.flip3.results.output-value)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
      when:
      - input: $(tasks.condition-2.results.outcome)
        operator: in
        values:
        - "true"
    - name: condition-4
      params:
      - name: operand1
        value: $(tasks.flip.results.output-value)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
  timeout: 0s
