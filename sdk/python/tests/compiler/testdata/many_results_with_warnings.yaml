# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: many-results-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"print4results": [{"key": "artifacts/$PIPELINERUN/print4results/param1.tgz",
      "name": "print4results-param1", "path": "/tmp/outputs/param1/data"}, {"key":
      "artifacts/$PIPELINERUN/print4results/param2.tgz", "name": "print4results-param2",
      "path": "/tmp/outputs/param2/data"}, {"key": "artifacts/$PIPELINERUN/print4results/param3.tgz",
      "name": "print4results-param3", "path": "/tmp/outputs/param3/data"}, {"key":
      "artifacts/$PIPELINERUN/print4results/superlongnamesuperlongnamesuperlongnamesuperlongnamesuper.tgz",
      "name": "print4results-superlongnamesuperlongnamesuperlongnamesuperlongnamesuper",
      "path": "/tmp/outputs/superlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongname/data"}]}'
    tekton.dev/input_artifacts: '{}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"print4results": [["param1", "$(results.param1.path)"],
      ["param2", "/tekton/home/tep-results/param2"], ["param3", "/tekton/home/tep-results/param3"],
      ["superlongnamesuperlongnamesuperlongnamesuperlongnamesuper", "/tekton/home/tep-results/superlongnamesuperlongnamesuperlongnamesuperlongnamesuper"]]}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A pipeline that produce
      many results.", "name": "many-results-pipeline"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  pipelineSpec:
    tasks:
    - name: print4results
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - /tekton/home/tep-results/param1
          - $(results.param2.path)
          - $(results.param3.path)
          - $(results.superlongnamesuperlongnamesuperlongnamesuperlongnamesuper.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def print4results():
               """Print 4 long results"""
               a = 'a' * 2500
               b = 'b' * 700
               c = 'c' * 500
               d = 'd' * 900
               from collections import namedtuple
               task_output = namedtuple('taskOutput', ['param1', 'param2', 'param3',
               'superlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongname'])
               return task_output(a, b, c, d)

            def _serialize_str(str_value: str) -> str:
                if not isinstance(str_value, str):
                    raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                        str(str_value), str(type(str_value))))
                return str_value

            import argparse
            _parser = argparse.ArgumentParser(prog='Print4results', description='Print 4 long results')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = print4results(**_parsed_args)

            _output_serializers = [
                _serialize_str,
                _serialize_str,
                _serialize_str,
                _serialize_str,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        - name: copy-results-1
          args:
          - |
            mv /tekton/home/tep-results/param1 $(results.param1.path);
            mv $(results.superlongnamesuperlongnamesuperlongnamesuperlongnamesuper.path) /tekton/home/tep-results/superlongnamesuperlongnamesuperlongnamesuperlongnamesuper;
            mv $(results.param3.path) /tekton/home/tep-results/param3;
          command:
          - sh
          - -c
          image: library/bash
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact /tekton/home/tep-results/param2 $(results.param2.path)
            copy_artifact /tekton/home/tep-results/param3 $(results.param3.path)
            copy_artifact /tekton/home/tep-results/superlongnamesuperlongnamesuperlongnamesuperlongnamesuper $(results.superlongnamesuperlongnamesuperlongnamesuperlongnamesuper.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: param1
          type: string
          description: /tmp/outputs/param1/data
        - name: param2
          type: string
          description: /tmp/outputs/param2/data
        - name: param3
          type: string
          description: /tmp/outputs/param3/data
        - name: superlongnamesuperlongnamesuperlongnamesuperlongnamesuper
          type: string
          description: /tmp/outputs/superlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongname/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton-result-sizes: '{"param1": 2500, "param23": 700, "param3": 500,
              "superlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongname":
              900}'
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Print4results",
              "outputs": [{"name": "param1", "type": "String"}, {"name": "param2",
              "type": "String"}, {"name": "param3", "type": "String"}, {"name": "superlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongnamesuperlongname",
              "type": "String"}], "version": "Print4results@sha256=2abb522200107ab144eafa6107bb8fde6c10e446a9bdc2a7f4d3a50df6e8a0d2"}'
