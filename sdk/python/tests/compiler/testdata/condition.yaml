# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: flip-coin-example-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"flip": [{"key": "artifacts/$PIPELINERUN/flip/output.tgz",
      "name": "flip-output", "path": "/tmp/outputs/output/data"}], "flip-2": [{"key":
      "artifacts/$PIPELINERUN/flip-2/output.tgz", "name": "flip-2-output", "path":
      "/tmp/outputs/output/data"}], "flip-3": [{"key": "artifacts/$PIPELINERUN/flip-3/output.tgz",
      "name": "flip-3-output", "path": "/tmp/outputs/output/data"}]}'
    tekton.dev/input_artifacts: '{"print": [{"name": "flip-3-output", "parent_task":
      "flip-3"}], "print-2": [{"name": "flip-output", "parent_task": "flip"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"flip": [["output", "$(results.output.path)"]], "flip-2":
      [["output", "$(results.output.path)"]], "flip-3": [["output", "$(results.output.path)"]],
      "print": [], "print-2": []}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use dsl.Condition.",
      "inputs": [{"default": "heads", "name": "forced_result1", "optional": true,
      "type": "String"}, {"default": "tails", "name": "forced_result2", "optional":
      true, "type": "String"}, {"default": "heads", "name": "forced_result3", "optional":
      true, "type": "String"}], "name": "flip-coin-example-pipeline"}'
spec:
  params:
  - name: forced_result1
    value: heads
  - name: forced_result2
    value: tails
  - name: forced_result3
    value: heads
  pipelineSpec:
    params:
    - name: forced_result1
      default: heads
    - name: forced_result2
      default: tails
    - name: forced_result3
      default: heads
    tasks:
    - name: flip
      params:
      - name: forced_result1
        value: $(params.forced_result1)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -c
          - |
            python -c "import random; import sys; forced_result = '$0';       result = 'heads' if random.randint(0,1) == 0 else 'tails';       print(forced_result) if (forced_result == 'heads' or forced_result == 'tails') else print(result)"       | tee $1
          - $(inputs.params.forced_result1)
          - $(results.output.path)
          image: python:alpine3.6
        params:
        - name: forced_result1
        results:
        - name: output
          description: /tmp/outputs/output/data
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "flip", "outputs":
              [{"name": "output", "type": "String"}], "version": "flip@sha256=f8759c2bcdd89af3d7bae4547f835d76f3c79fa5e4061dcb4b4a7c1f1d68c99e"}'
            tekton.dev/template: ''
      timeout: 525600m
    - name: flip-2
      params:
      - name: forced_result3
        value: $(params.forced_result3)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -c
          - |
            python -c "import random; import sys; forced_result = '$0';       result = 'heads' if random.randint(0,1) == 0 else 'tails';       print(forced_result) if (forced_result == 'heads' or forced_result == 'tails') else print(result)"       | tee $1
          - $(inputs.params.forced_result3)
          - $(results.output.path)
          image: python:alpine3.6
        params:
        - name: forced_result3
        results:
        - name: output
          description: /tmp/outputs/output/data
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "flip", "outputs":
              [{"name": "output", "type": "String"}], "version": "flip@sha256=f8759c2bcdd89af3d7bae4547f835d76f3c79fa5e4061dcb4b4a7c1f1d68c99e"}'
            tekton.dev/template: ''
      timeout: 525600m
    - name: flip-3
      params:
      - name: forced_result2
        value: $(params.forced_result2)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -c
          - |
            python -c "import random; import sys; forced_result = '$0';       result = 'heads' if random.randint(0,1) == 0 else 'tails';       print(forced_result) if (forced_result == 'heads' or forced_result == 'tails') else print(result)"       | tee $1
          - $(inputs.params.forced_result2)
          - $(results.output.path)
          image: python:alpine3.6
        params:
        - name: forced_result2
        results:
        - name: output
          description: /tmp/outputs/output/data
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "flip", "outputs":
              [{"name": "output", "type": "String"}], "version": "flip@sha256=f8759c2bcdd89af3d7bae4547f835d76f3c79fa5e4061dcb4b4a7c1f1d68c99e"}'
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-1.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 525600m
    - name: print
      params:
      - name: flip-3-output
        value: $(tasks.flip-3.results.output)
      taskSpec:
        steps:
        - name: main
          command:
          - echo
          - $(inputs.params.flip-3-output)
          image: alpine:3.6
        params:
        - name: flip-3-output
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "print", "outputs":
              [], "version": "print@sha256=7340d64f47e64e089970390671baff36b7be44da16bdef6c2a89e85ce69634f4"}'
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-3.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 525600m
    - name: print-2
      params:
      - name: flip-output
        value: $(tasks.flip.results.output)
      taskSpec:
        steps:
        - name: main
          command:
          - echo
          - $(inputs.params.flip-output)
          image: alpine:3.6
        params:
        - name: flip-output
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "print", "outputs":
              [], "version": "print@sha256=7340d64f47e64e089970390671baff36b7be44da16bdef6c2a89e85ce69634f4"}'
            tekton.dev/template: ''
      when:
      - input: $(tasks.condition-4.results.outcome)
        operator: in
        values:
        - "true"
      timeout: 525600m
    - name: condition-1
      params:
      - name: operand1
        value: $(tasks.flip.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
    - name: condition-2
      params:
      - name: operand1
        value: $(tasks.flip-3.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
      when:
      - input: $(tasks.condition-1.results.outcome)
        operator: in
        values:
        - "true"
    - name: condition-3
      params:
      - name: operand1
        value: $(tasks.flip-2.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
      when:
      - input: $(tasks.condition-2.results.outcome)
        operator: in
        values:
        - "true"
    - name: condition-4
      params:
      - name: operand1
        value: $(tasks.flip.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
      taskSpec:
        results:
        - name: outcome
          description: Conditional task outcome
        params:
        - name: operand1
        - name: operand2
        - name: operator
        steps:
        - script: |-
            python -c 'import sys
            input1=str.rstrip(sys.argv[1])
            input2=str.rstrip(sys.argv[2])
            try:
              input1=int(input1)
              input2=int(input2)
            except:
              input1=str(input1)
            outcome="true" if (input1 $(inputs.params.operator) input2) else "false"
            f = open("/tekton/results/outcome", "w")
            f.write(outcome)
            f.close()' '$(inputs.params.operand1)' '$(inputs.params.operand2)'
          image: python:alpine3.6
  timeout: 525600m
