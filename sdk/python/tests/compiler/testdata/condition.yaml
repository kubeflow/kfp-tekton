# Copyright 2020 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use dsl.Condition.",
      "inputs": [{"default": "heads", "name": "forced_result1", "optional": true,
      "type": "String"}, {"default": "tails", "name": "forced_result2", "optional":
      true, "type": "String"}], "name": "Flip Coin Example Pipeline"}'
    sidecar.istio.io/inject: 'false'
    tekton.dev/input_artifacts: '{"print1": [{"name": "flip-again-output", "parent_task":
      "flip-again"}], "print2": [{"name": "flip-output", "parent_task": "flip"}]}'
    tekton.dev/output_artifacts: '{"flip": [{"name": "flip-output", "path": "/tmp/output"}],
      "flip-again": [{"name": "flip-again-output", "path": "/tmp/output"}]}'
  name: flip-coin-example-pipeline
spec:
  params:
  - name: forced_result1
    value: heads
  - name: forced_result2
    value: tails
  pipelineSpec:
    params:
    - default: heads
      name: forced_result1
    - default: tails
      name: forced_result2
    tasks:
    - name: flip
      params:
      - name: forced_result1
        value: $(params.forced_result1)
      taskSpec:
        params:
        - name: forced_result1
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; import sys; forced_result = '$(inputs.params.forced_result1)';
            result = 'heads' if random.randint(0,1) == 0 else 'tails'; print(forced_result)
            if (forced_result == 'heads' or forced_result == 'tails') else print(result)"
            | tee $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
        - env:
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          image: minio/mc
          name: copy-artifacts
          script: '#!/usr/bin/env sh

            mc config host add storage http://minio-service.$NAMESPACE:9000 $AWS_ACCESS_KEY_ID
            $AWS_SECRET_ACCESS_KEY

            tar -cvzf output.tgz $(results.output.path)

            mc cp output.tgz storage/mlpipeline/artifacts/$PIPELINERUN/$PIPELINETASK/output.tgz

            '
    - conditions:
      - conditionRef: super-condition
        params:
        - name: operand1
          value: $(tasks.flip.results.output)
        - name: operand2
          value: heads
        - name: operator
          value: ==
      name: flip-again
      params:
      - name: forced_result2
        value: $(params.forced_result2)
      taskSpec:
        params:
        - name: forced_result2
        results:
        - description: /tmp/output
          name: output
        steps:
        - args:
          - python -c "import random; import sys; forced_result = '$(inputs.params.forced_result2)';
            result = 'heads' if random.randint(0,1) == 0 else 'tails'; print(forced_result)
            if (forced_result == 'heads' or forced_result == 'tails') else print(result)"
            | tee $(results.output.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
          name: main
        - env:
          - name: PIPELINERUN
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineRun']
          - name: PIPELINETASK
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['tekton.dev/pipelineTask']
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: accesskey
                name: mlpipeline-minio-artifact
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: secretkey
                name: mlpipeline-minio-artifact
          image: minio/mc
          name: copy-artifacts
          script: '#!/usr/bin/env sh

            mc config host add storage http://minio-service.$NAMESPACE:9000 $AWS_ACCESS_KEY_ID
            $AWS_SECRET_ACCESS_KEY

            tar -cvzf output.tgz $(results.output.path)

            mc cp output.tgz storage/mlpipeline/artifacts/$PIPELINERUN/$PIPELINETASK/output.tgz

            '
    - conditions:
      - conditionRef: super-condition
        params:
        - name: operand1
          value: $(tasks.flip-again.results.output)
        - name: operand2
          value: tails
        - name: operator
          value: ==
      - conditionRef: super-condition
        params:
        - name: operand1
          value: $(tasks.flip.results.output)
        - name: operand2
          value: heads
        - name: operator
          value: ==
      name: print1
      params:
      - name: flip-again-output
        value: $(tasks.flip-again.results.output)
      taskSpec:
        params:
        - name: flip-again-output
        steps:
        - command:
          - echo
          - $(inputs.params.flip-again-output)
          image: alpine:3.6
          name: main
    - conditions:
      - conditionRef: super-condition
        params:
        - name: operand1
          value: $(tasks.flip.results.output)
        - name: operand2
          value: tails
        - name: operator
          value: ==
      name: print2
      params:
      - name: flip-output
        value: $(tasks.flip.results.output)
      taskSpec:
        params:
        - name: flip-output
        steps:
        - command:
          - echo
          - $(inputs.params.flip-output)
          image: alpine:3.6
          name: main
