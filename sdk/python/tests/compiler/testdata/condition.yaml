# Copyright 2020 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: super-condition
spec:
  check:
    image: python:alpine3.6
    script: "python -c 'import sys\ninput1=str.rstrip(sys.argv[1])\ninput2=str.rstrip(sys.argv[2])\n\
      try:\n  input1=int(input1)\n  input2=int(input2)\nexcept:\n  input1=str(input1)\n\
      sys.exit(0) if (input1 $(params.operator) input2) else sys.exit(1)' '$(params.operand1)'\
      \ '$(params.operand2)'"
  params:
  - name: operand1
  - name: operand2
  - name: operator
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flip
spec:
  results:
  - description: /tmp/output
    name: output
  steps:
  - args:
    - python -c "import random; result = 'heads' if random.randint(0,1) == 0 else
      'tails'; print(result)" | tee $(results.output.path)
    command:
    - sh
    - -c
    image: python:alpine3.6
    name: main
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: flip-again
spec:
  results:
  - description: /tmp/output
    name: output
  steps:
  - args:
    - python -c "import random; result = 'heads' if random.randint(0,1) == 0 else
      'tails'; print(result)" | tee $(results.output.path)
    command:
    - sh
    - -c
    image: python:alpine3.6
    name: main
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: print1
spec:
  params:
  - name: flip-again-output
  steps:
  - command:
    - echo
    - $(inputs.params.flip-again-output)
    image: alpine:3.6
    name: main
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: print2
spec:
  params:
  - name: flip-again-output
  steps:
  - command:
    - echo
    - $(inputs.params.flip-again-output)
    image: alpine:3.6
    name: main
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use dsl.Condition.",
      "name": "Flip Coin Example Pipeline"}'
    sidecar.istio.io/inject: 'false'
  name: flip-coin-example-pipeline
spec:
  tasks:
  - name: flip
    taskRef:
      name: flip
  - conditions:
    - conditionRef: super-condition
      params:
      - name: operand1
        value: $(tasks.flip.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
    name: flip-again
    taskRef:
      name: flip-again
  - conditions:
    - conditionRef: super-condition
      params:
      - name: operand1
        value: $(tasks.flip-again.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
    - conditionRef: super-condition
      params:
      - name: operand1
        value: $(tasks.flip.results.output)
      - name: operand2
        value: heads
      - name: operator
        value: ==
    name: print1
    params:
    - name: flip-again-output
      value: $(tasks.flip-again.results.output)
    taskRef:
      name: print1
  - conditions:
    - conditionRef: super-condition
      params:
      - name: operand1
        value: $(tasks.flip.results.output)
      - name: operand2
        value: tails
      - name: operator
        value: ==
    name: print2
    params:
    - name: flip-again-output
      value: $(tasks.flip-again.results.output)
    taskRef:
      name: print2
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotation:
    tekton.dev/input_artifacts: '{}'
    tekton.dev/output_artifacts: '{}'
  name: flip-coin-example-pipeline-run
spec:
  pipelineRef:
    name: flip-coin-example-pipeline
