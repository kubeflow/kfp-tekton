# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: many-results-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"print4results": [{"key": "artifacts/$PIPELINERUN/print4results/param1.tgz",
      "name": "print4results-param1", "path": "/tmp/outputs/param1/data"}, {"key":
      "artifacts/$PIPELINERUN/print4results/param2A.tgz", "name": "print4results-param2A",
      "path": "/tmp/outputs/param2A/data"}, {"key": "artifacts/$PIPELINERUN/print4results/param3_b.tgz",
      "name": "print4results-param3_b", "path": "/tmp/outputs/param3_b/data"}, {"key":
      "artifacts/$PIPELINERUN/print4results/param4c.tgz", "name": "print4results-param4c",
      "path": "/tmp/outputs/param4c/data"}]}'
    tekton.dev/input_artifacts: '{"print": [{"name": "print4results-param3_b", "parent_task":
      "print4results"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"print": [], "print4results": [["param1", "/tekton/home/tep-results/param1"],
      ["param2A", "$(results.param2a.path)"], ["param3_b", "/tekton/home/tep-results/param3-b"],
      ["param4c", "$(results.param4c.path)"]]}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"description": "A pipeline that produce
      many results.", "name": "many-results-pipeline"}'
spec:
  pipelineSpec:
    tasks:
    - name: print4results
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(results.param1.path)
          - /tekton/home/tep-results/param2a
          - $(results.param3-b.path)
          - /tekton/home/tep-results/param4c
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def print4results():
               """Print 4 long results"""
               a = 'a' * 1500
               b = 'b' * 700
               c = 'c' * 500
               d = 'd' * 900
               from collections import namedtuple
               task_output = namedtuple('taskOutput', ['param1', 'param2A', 'param3_b', 'param4c'])
               return task_output(a, b, c, d)

            def _serialize_str(str_value: str) -> str:
                if not isinstance(str_value, str):
                    raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                        str(str_value), str(type(str_value))))
                return str_value

            import argparse
            _parser = argparse.ArgumentParser(prog='Print4results', description='Print 4 long results')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=4)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = print4results(**_parsed_args)

            _output_serializers = [
                _serialize_str,
                _serialize_str,
                _serialize_str,
                _serialize_str,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        - name: copy-results-1
          args:
          - |
            mv /tekton/home/tep-results/param4c $(results.param4c.path);
            mv /tekton/home/tep-results/param2a $(results.param2a.path);
            mv $(results.param1.path) /tekton/home/tep-results/param1;
            mv $(results.param3-b.path) /tekton/home/tep-results/param3-b;
          command:
          - sh
          - -c
          image: library/bash
        - image: busybox
          name: copy-results-artifacts
          script: |
            #!/bin/sh
            set -exo pipefail
            TOTAL_SIZE=0
            ARTIFACT_SIZE=`wc -c /tekton/home/tep-results/param1 | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch $(results.param1.path)
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if ! awk "/[^[:print:]]/{f=1} END{exit !f}" /tekton/home/tep-results/param1; then
                cp /tekton/home/tep-results/param1 $(results.param1.path)
              fi
            fi
            ARTIFACT_SIZE=`wc -c /tekton/home/tep-results/param3-b | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch $(results.param3-b.path)
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if ! awk "/[^[:print:]]/{f=1} END{exit !f}" /tekton/home/tep-results/param3-b; then
                cp /tekton/home/tep-results/param3-b $(results.param3-b.path)
              fi
            fi
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: param1
          type: string
          description: /tmp/outputs/param1/data
        - name: param2a
          type: string
          description: /tmp/outputs/param2A/data
        - name: param3-b
          type: string
          description: /tmp/outputs/param3_b/data
        - name: param4c
          type: string
          description: /tmp/outputs/param4c/data
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            tekton-result-sizes: '{"param1": 1500, "param2A": 700, "param3_b": 500,
              "param4c": 900}'
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Print4results",
              "outputs": [{"name": "param1", "type": "String"}, {"name": "param2A",
              "type": "String"}, {"name": "param3_b", "type": "String"}, {"name":
              "param4c", "type": "String"}], "version": "Print4results@sha256=3cc8c7ea2f9c9feb20536ff2e17e624b38ab42c60b915de79fb2b328b619bb54"}'
            tekton.dev/template: ''
      timeout: 525600m
    - name: print
      params:
      - name: print4results-param3_b
        value: $(tasks.print4results.results.param3-b)
      taskSpec:
        steps:
        - name: main
          command:
          - sh
          - -c
          - |
            echo $0
          - $(inputs.params.print4results-param3_b)
          image: alpine:3.6
        params:
        - name: print4results-param3_b
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "print", "outputs":
              [], "version": "print@sha256=7414614ece3ba415ce2df0ef0612f4bbb087ebd4f7314a47f65db849f5dd1004"}'
            tekton.dev/template: ''
      timeout: 525600m
  timeout: 525600m
