# Copyright 2021-2023 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: data-passing-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"produce-anything": [{"key": "artifacts/$PIPELINERUN/produce-anything/data.tgz",
      "name": "produce-anything-data", "path": "/tmp/outputs/data/data"}], "produce-something":
      [{"key": "artifacts/$PIPELINERUN/produce-something/data.tgz", "name": "produce-something-data",
      "path": "/tmp/outputs/data/data"}], "produce-string": [{"key": "artifacts/$PIPELINERUN/produce-string/Output.tgz",
      "name": "produce-string-Output", "path": "/tmp/outputs/Output/data"}]}'
    tekton.dev/input_artifacts: '{"consume-anything-as-file-5": [{"name": "produce-anything-data",
      "parent_task": "produce-anything"}], "consume-anything-as-file-6": [{"name":
      "produce-something-data", "parent_task": "produce-something"}], "consume-anything-as-file-7":
      [{"name": "produce-string-Output", "parent_task": "produce-string"}], "consume-anything-as-value-5":
      [{"name": "produce-anything-data", "parent_task": "produce-anything"}], "consume-anything-as-value-6":
      [{"name": "produce-something-data", "parent_task": "produce-something"}], "consume-anything-as-value-7":
      [{"name": "produce-string-Output", "parent_task": "produce-string"}], "consume-something-as-file-4":
      [{"name": "produce-anything-data", "parent_task": "produce-anything"}], "consume-something-as-file-5":
      [{"name": "produce-something-data", "parent_task": "produce-something"}], "consume-something-as-value-4":
      [{"name": "produce-anything-data", "parent_task": "produce-anything"}], "consume-something-as-value-5":
      [{"name": "produce-something-data", "parent_task": "produce-something"}], "consume-string-as-file-4":
      [{"name": "produce-anything-data", "parent_task": "produce-anything"}], "consume-string-as-file-5":
      [{"name": "produce-string-Output", "parent_task": "produce-string"}], "consume-string-as-value-4":
      [{"name": "produce-anything-data", "parent_task": "produce-anything"}], "consume-string-as-value-5":
      [{"name": "produce-string-Output", "parent_task": "produce-string"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"consume-anything-as-file": [], "consume-anything-as-file-2":
      [], "consume-anything-as-file-3": [], "consume-anything-as-file-4": [], "consume-anything-as-file-5":
      [], "consume-anything-as-file-6": [], "consume-anything-as-file-7": [], "consume-anything-as-value":
      [], "consume-anything-as-value-2": [], "consume-anything-as-value-3": [], "consume-anything-as-value-4":
      [], "consume-anything-as-value-5": [], "consume-anything-as-value-6": [], "consume-anything-as-value-7":
      [], "consume-something-as-file": [], "consume-something-as-file-2": [], "consume-something-as-file-3":
      [], "consume-something-as-file-4": [], "consume-something-as-file-5": [], "consume-something-as-value":
      [], "consume-something-as-value-2": [], "consume-something-as-value-3": [],
      "consume-something-as-value-4": [], "consume-something-as-value-5": [], "consume-string-as-file":
      [], "consume-string-as-file-2": [], "consume-string-as-file-3": [], "consume-string-as-file-4":
      [], "consume-string-as-file-5": [], "consume-string-as-value": [], "consume-string-as-value-2":
      [], "consume-string-as-value-3": [], "consume-string-as-value-4": [], "consume-string-as-value-5":
      [], "produce-anything": [["data", "$(workspaces.produce-anything.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data"]],
      "produce-something": [["data", "$(workspaces.produce-something.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data"]],
      "produce-string": [["Output", "$(workspaces.produce-string.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Output"]]}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "anything_param",
      "name": "anything_param", "optional": true}, {"default": "something_param",
      "name": "something_param", "optional": true, "type": "Something"}, {"default":
      "string_param", "name": "string_param", "optional": true, "type": "String"}],
      "name": "data_passing_pipeline"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  params:
  - name: anything_param
    value: anything_param
  - name: something_param
    value: something_param
  - name: string_param
    value: string_param
  pipelineSpec:
    params:
    - name: anything_param
      default: anything_param
    - name: something_param
      default: something_param
    - name: string_param
      default: string_param
    tasks:
    - name: produce-anything
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.produce-anything.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def _make_parent_dirs_and_return_path(file_path: str):
                import os
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                return file_path

            def produce_anything(data_path):
                with open(data_path, "w") as f:
                    f.write("produce_anything")

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce anything', description='')
            _parser.add_argument("--data", dest="data_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = produce_anything(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        - image: busybox
          name: output-taskrun-name
          command:
          - sh
          - -ec
          - echo -n "$(context.taskRun.name)" > "$(results.taskrun-name.path)"
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact $(workspaces.produce-anything.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data $(results.data.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: data
          type: string
          description: /tmp/outputs/data/data
        - name: taskrun-name
          type: string
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce anything",
              "outputs": [{"name": "data"}], "version": "Produce anything@sha256=e0d1d2b2c37de20e127eb5e52f5cfa8f4cdfe4657e6d46521ae87272b92bca86"}'
        workspaces:
        - name: produce-anything
      workspaces:
      - name: produce-anything
        workspace: data-passing-pipeline
    - name: produce-something
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.produce-something.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def _make_parent_dirs_and_return_path(file_path: str):
                import os
                os.makedirs(os.path.dirname(file_path), exist_ok=True)
                return file_path

            def produce_something(data_path):
                with open(data_path, "w") as f:
                    f.write("produce_something")

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce something', description='')
            _parser.add_argument("--data", dest="data_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = produce_something(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        - image: busybox
          name: output-taskrun-name
          command:
          - sh
          - -ec
          - echo -n "$(context.taskRun.name)" > "$(results.taskrun-name.path)"
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact $(workspaces.produce-something.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/data $(results.data.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: data
          type: string
          description: /tmp/outputs/data/data
        - name: taskrun-name
          type: string
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce something",
              "outputs": [{"name": "data", "type": "Something"}], "version": "Produce
              something@sha256=63c523da412a90ddab960b20ffe9b7f0e3e13b6b66369811479d68e8b9b5c84b"}'
        workspaces:
        - name: produce-something
      workspaces:
      - name: produce-something
        workspace: data-passing-pipeline
    - name: produce-string
      taskSpec:
        steps:
        - name: main
          args:
          - '----output-paths'
          - $(workspaces.produce-string.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Output
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_string():
                return "produce_string"

            def _serialize_str(str_value: str) -> str:
                if not isinstance(str_value, str):
                    raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                        str(str_value), str(type(str_value))))
                return str_value

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce string', description='')
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_string(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_str,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        - image: busybox
          name: output-taskrun-name
          command:
          - sh
          - -ec
          - echo -n "$(context.taskRun.name)" > "$(results.taskrun-name.path)"
        - image: busybox
          name: copy-results-artifacts
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            TOTAL_SIZE=0
            copy_artifact() {
            if [ -d "$1" ]; then
              tar -czvf "$1".tar.gz "$1"
              SUFFIX=".tar.gz"
            fi
            ARTIFACT_SIZE=`wc -c "$1"${SUFFIX} | awk '{print $1}'`
            TOTAL_SIZE=$( expr $TOTAL_SIZE + $ARTIFACT_SIZE)
            touch "$2"
            if [[ $TOTAL_SIZE -lt 3072 ]]; then
              if [ -d "$1" ]; then
                tar -tzf "$1".tar.gz > "$2"
              elif ! awk "/[^[:print:]]/{f=1} END{exit !f}" "$1"; then
                cp "$1" "$2"
              fi
            fi
            }
            copy_artifact $(workspaces.produce-string.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/Output $(results.Output.path)
          onError: continue
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        - name: taskrun-name
          type: string
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce string",
              "outputs": [{"name": "Output", "type": "String"}], "version": "Produce
              string@sha256=8eb027589d021d1968d4db71db08287540ac24f305da4d91f3bac15c41562281"}'
        workspaces:
        - name: produce-string
      workspaces:
      - name: produce-string
        workspace: data-passing-pipeline
    - name: consume-anything-as-value
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - constant
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-something-as-value
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - constant
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_value(data):
                print("consume_something_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_value(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as value", "outputs": [], "version": "Consume something as value@sha256=e73d802cc0fbe17f619e7cdc4e5a574e3924f7836af26da626356b912a0497eb"}'
    - name: consume-string-as-value
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - constant
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_value(data):
                print("consume_string_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_value(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as value", "outputs": [], "version": "Consume string as value@sha256=7ffbab8c19ae23102d7a2e6cfd96b8a7d55eed8667a6ea88a8c70d3ed871b2d2"}'
    - name: consume-anything-as-file
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            echo -n "constant" > /tmp/inputs/data/data
        - name: main
          args:
          - --data
          - /tmp/inputs/data/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        stepTemplate:
          volumeMounts:
          - name: data
            mountPath: /tmp/inputs/data
        volumes:
        - name: data
          emptyDir: {}
    - name: consume-something-as-file
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            echo -n "constant" > /tmp/inputs/data/data
        - name: main
          args:
          - --data
          - /tmp/inputs/data/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_file(data_path):
                with open(data_path) as f:
                    print("consume_something_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_file(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as file", "outputs": [], "version": "Consume something as file@sha256=f4c0021ec28d8ff1d0e3fbfe6712ee25df4cd101bc1c15e99d1cbdf66976cc35"}'
        stepTemplate:
          volumeMounts:
          - name: data
            mountPath: /tmp/inputs/data
        volumes:
        - name: data
          emptyDir: {}
    - name: consume-string-as-file
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            echo -n "constant" > /tmp/inputs/data/data
        - name: main
          args:
          - --data
          - /tmp/inputs/data/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_file(data_path):
                with open(data_path) as f:
                    print("consume_string_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_file(**_parsed_args)
          image: python:3.7
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as file", "outputs": [], "version": "Consume string as file@sha256=f58c7cc40eac125991a0967cdf0c76832ae99042d1c681f5601348c09fc50510"}'
        stepTemplate:
          volumeMounts:
          - name: data
            mountPath: /tmp/inputs/data
        volumes:
        - name: data
          emptyDir: {}
    - name: consume-anything-as-value-2
      params:
      - name: anything_param
        value: $(params.anything_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.anything_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: anything_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-anything-as-value-3
      params:
      - name: something_param
        value: $(params.something_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.something_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: something_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-anything-as-value-4
      params:
      - name: string_param
        value: $(params.string_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.string_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: string_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-something-as-value-2
      params:
      - name: anything_param
        value: $(params.anything_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.anything_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_value(data):
                print("consume_something_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: anything_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as value", "outputs": [], "version": "Consume something as value@sha256=e73d802cc0fbe17f619e7cdc4e5a574e3924f7836af26da626356b912a0497eb"}'
    - name: consume-something-as-value-3
      params:
      - name: something_param
        value: $(params.something_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.something_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_value(data):
                print("consume_something_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: something_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as value", "outputs": [], "version": "Consume something as value@sha256=e73d802cc0fbe17f619e7cdc4e5a574e3924f7836af26da626356b912a0497eb"}'
    - name: consume-string-as-value-2
      params:
      - name: anything_param
        value: $(params.anything_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.anything_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_value(data):
                print("consume_string_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: anything_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as value", "outputs": [], "version": "Consume string as value@sha256=7ffbab8c19ae23102d7a2e6cfd96b8a7d55eed8667a6ea88a8c70d3ed871b2d2"}'
    - name: consume-string-as-value-3
      params:
      - name: string_param
        value: $(params.string_param)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.string_param)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_value(data):
                print("consume_string_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: string_param
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as value", "outputs": [], "version": "Consume string as value@sha256=7ffbab8c19ae23102d7a2e6cfd96b8a7d55eed8667a6ea88a8c70d3ed871b2d2"}'
    - name: consume-anything-as-file-2
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-anything-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "anything_param" > $(workspaces.consume-anything-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-2
      workspaces:
      - name: consume-anything-as-file-2
        workspace: data-passing-pipeline
    - name: consume-anything-as-file-3
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-anything-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "something_param" > $(workspaces.consume-anything-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/something_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/something_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-3
      workspaces:
      - name: consume-anything-as-file-3
        workspace: data-passing-pipeline
    - name: consume-anything-as-file-4
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-anything-as-file-4.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "string_param" > $(workspaces.consume-anything-as-file-4.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/string_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-4.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/string_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-4
      workspaces:
      - name: consume-anything-as-file-4
        workspace: data-passing-pipeline
    - name: consume-something-as-file-2
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-something-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "anything_param" > $(workspaces.consume-something-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-something-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_file(data_path):
                with open(data_path) as f:
                    print("consume_something_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as file", "outputs": [], "version": "Consume something as file@sha256=f4c0021ec28d8ff1d0e3fbfe6712ee25df4cd101bc1c15e99d1cbdf66976cc35"}'
        workspaces:
        - name: consume-something-as-file-2
      workspaces:
      - name: consume-something-as-file-2
        workspace: data-passing-pipeline
    - name: consume-something-as-file-3
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-something-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "something_param" > $(workspaces.consume-something-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/something_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-something-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/something_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_file(data_path):
                with open(data_path) as f:
                    print("consume_something_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as file", "outputs": [], "version": "Consume something as file@sha256=f4c0021ec28d8ff1d0e3fbfe6712ee25df4cd101bc1c15e99d1cbdf66976cc35"}'
        workspaces:
        - name: consume-something-as-file-3
      workspaces:
      - name: consume-something-as-file-3
        workspace: data-passing-pipeline
    - name: consume-string-as-file-2
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-string-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "anything_param" > $(workspaces.consume-string-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-string-as-file-2.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/anything_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_file(data_path):
                with open(data_path) as f:
                    print("consume_string_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as file", "outputs": [], "version": "Consume string as file@sha256=f58c7cc40eac125991a0967cdf0c76832ae99042d1c681f5601348c09fc50510"}'
        workspaces:
        - name: consume-string-as-file-2
      workspaces:
      - name: consume-string-as-file-2
        workspace: data-passing-pipeline
    - name: consume-string-as-file-3
      taskSpec:
        steps:
        - image: busybox
          name: copy-inputs
          command:
          - sh
          - -ec
          - |
            set -exo pipefail
            mkdir -p $(workspaces.consume-string-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)
            echo -n "string_param" > $(workspaces.consume-string-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/string_param
        - name: main
          args:
          - --data
          - $(workspaces.consume-string-as-file-3.path)/artifacts/$ORIG_PR_NAME/$(context.taskRun.name)/string_param
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_file(data_path):
                with open(data_path) as f:
                    print("consume_string_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as file", "outputs": [], "version": "Consume string as file@sha256=f58c7cc40eac125991a0967cdf0c76832ae99042d1c681f5601348c09fc50510"}'
        workspaces:
        - name: consume-string-as-file-3
      workspaces:
      - name: consume-string-as-file-3
        workspace: data-passing-pipeline
    - name: consume-anything-as-value-5
      params:
      - name: produce-anything-data
        value: $(tasks.produce-anything.results.data)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-anything-data)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-anything-data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-anything-as-value-6
      params:
      - name: produce-something-data
        value: $(tasks.produce-something.results.data)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-something-data)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-something-data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-anything-as-value-7
      params:
      - name: produce-string-Output
        value: $(tasks.produce-string.results.Output)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-string-Output)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_value(data):
                print("consume_anything_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-string-Output
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as value", "outputs": [], "version": "Consume anything as value@sha256=b2e344143f1b38810b7679b387daeb1ffeb21753d3961f673cd06d16bbdca17c"}'
    - name: consume-something-as-value-4
      params:
      - name: produce-anything-data
        value: $(tasks.produce-anything.results.data)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-anything-data)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_value(data):
                print("consume_something_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-anything-data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as value", "outputs": [], "version": "Consume something as value@sha256=e73d802cc0fbe17f619e7cdc4e5a574e3924f7836af26da626356b912a0497eb"}'
    - name: consume-something-as-value-5
      params:
      - name: produce-something-data
        value: $(tasks.produce-something.results.data)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-something-data)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_value(data):
                print("consume_something_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-something-data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as value", "outputs": [], "version": "Consume something as value@sha256=e73d802cc0fbe17f619e7cdc4e5a574e3924f7836af26da626356b912a0497eb"}'
    - name: consume-string-as-value-4
      params:
      - name: produce-anything-data
        value: $(tasks.produce-anything.results.data)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-anything-data)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_value(data):
                print("consume_string_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-anything-data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as value", "outputs": [], "version": "Consume string as value@sha256=7ffbab8c19ae23102d7a2e6cfd96b8a7d55eed8667a6ea88a8c70d3ed871b2d2"}'
    - name: consume-string-as-value-5
      params:
      - name: produce-string-Output
        value: $(tasks.produce-string.results.Output)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(inputs.params.produce-string-Output)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_value(data):
                print("consume_string_as_value: " + data)

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as value', description='')
            _parser.add_argument("--data", dest="data", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_value(**_parsed_args)
          image: python:3.7
        params:
        - name: produce-string-Output
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as value", "outputs": [], "version": "Consume string as value@sha256=7ffbab8c19ae23102d7a2e6cfd96b8a7d55eed8667a6ea88a8c70d3ed871b2d2"}'
    - name: consume-anything-as-file-5
      params:
      - name: produce-anything-trname
        value: $(tasks.produce-anything.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-5.path)/artifacts/$ORIG_PR_NAME/$(params.produce-anything-trname)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-anything-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-5
      workspaces:
      - name: consume-anything-as-file-5
        workspace: data-passing-pipeline
      runAfter:
      - produce-anything
    - name: consume-anything-as-file-6
      params:
      - name: produce-something-trname
        value: $(tasks.produce-something.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-6.path)/artifacts/$ORIG_PR_NAME/$(params.produce-something-trname)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-something-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-6
      workspaces:
      - name: consume-anything-as-file-6
        workspace: data-passing-pipeline
      runAfter:
      - produce-something
    - name: consume-anything-as-file-7
      params:
      - name: produce-string-trname
        value: $(tasks.produce-string.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-anything-as-file-7.path)/artifacts/$ORIG_PR_NAME/$(params.produce-string-trname)/Output
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_anything_as_file(data_path):
                with open(data_path) as f:
                    print("consume_anything_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume anything as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_anything_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-string-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume anything
              as file", "outputs": [], "version": "Consume anything as file@sha256=c8060984df9dfe0b5f01970c18b087d7083d280222586b664662403b7afbc30a"}'
        workspaces:
        - name: consume-anything-as-file-7
      workspaces:
      - name: consume-anything-as-file-7
        workspace: data-passing-pipeline
      runAfter:
      - produce-string
    - name: consume-something-as-file-4
      params:
      - name: produce-anything-trname
        value: $(tasks.produce-anything.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-something-as-file-4.path)/artifacts/$ORIG_PR_NAME/$(params.produce-anything-trname)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_file(data_path):
                with open(data_path) as f:
                    print("consume_something_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-anything-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as file", "outputs": [], "version": "Consume something as file@sha256=f4c0021ec28d8ff1d0e3fbfe6712ee25df4cd101bc1c15e99d1cbdf66976cc35"}'
        workspaces:
        - name: consume-something-as-file-4
      workspaces:
      - name: consume-something-as-file-4
        workspace: data-passing-pipeline
      runAfter:
      - produce-anything
    - name: consume-something-as-file-5
      params:
      - name: produce-something-trname
        value: $(tasks.produce-something.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-something-as-file-5.path)/artifacts/$ORIG_PR_NAME/$(params.produce-something-trname)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_something_as_file(data_path):
                with open(data_path) as f:
                    print("consume_something_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume something as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_something_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-something-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume something
              as file", "outputs": [], "version": "Consume something as file@sha256=f4c0021ec28d8ff1d0e3fbfe6712ee25df4cd101bc1c15e99d1cbdf66976cc35"}'
        workspaces:
        - name: consume-something-as-file-5
      workspaces:
      - name: consume-something-as-file-5
        workspace: data-passing-pipeline
      runAfter:
      - produce-something
    - name: consume-string-as-file-4
      params:
      - name: produce-anything-trname
        value: $(tasks.produce-anything.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-string-as-file-4.path)/artifacts/$ORIG_PR_NAME/$(params.produce-anything-trname)/data
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_file(data_path):
                with open(data_path) as f:
                    print("consume_string_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-anything-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as file", "outputs": [], "version": "Consume string as file@sha256=f58c7cc40eac125991a0967cdf0c76832ae99042d1c681f5601348c09fc50510"}'
        workspaces:
        - name: consume-string-as-file-4
      workspaces:
      - name: consume-string-as-file-4
        workspace: data-passing-pipeline
      runAfter:
      - produce-anything
    - name: consume-string-as-file-5
      params:
      - name: produce-string-trname
        value: $(tasks.produce-string.results.taskrun-name)
      taskSpec:
        steps:
        - name: main
          args:
          - --data
          - $(workspaces.consume-string-as-file-5.path)/artifacts/$ORIG_PR_NAME/$(params.produce-string-trname)/Output
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def consume_string_as_file(data_path):
                with open(data_path) as f:
                    print("consume_string_as_file: " + f.read())

            import argparse
            _parser = argparse.ArgumentParser(prog='Consume string as file', description='')
            _parser.add_argument("--data", dest="data_path", type=str, required=True, default=argparse.SUPPRESS)
            _parsed_args = vars(_parser.parse_args())

            _outputs = consume_string_as_file(**_parsed_args)
          image: python:3.7
          env:
          - name: ORIG_PR_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['custom.tekton.dev/originalPipelineRun']
        params:
        - name: produce-string-trname
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Consume string
              as file", "outputs": [], "version": "Consume string as file@sha256=f58c7cc40eac125991a0967cdf0c76832ae99042d1c681f5601348c09fc50510"}'
        workspaces:
        - name: consume-string-as-file-5
      workspaces:
      - name: consume-string-as-file-5
        workspace: data-passing-pipeline
      runAfter:
      - produce-string
    workspaces:
    - name: data-passing-pipeline
  workspaces:
  - name: data-passing-pipeline
    volumeClaimTemplate:
      spec:
        storageClassName: kfp-csi-s3
        accessModes:
        - ReadWriteMany
        resources:
          requests:
            storage: 2Gi
