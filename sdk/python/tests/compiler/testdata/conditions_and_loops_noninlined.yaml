# Copyright 2021 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: conditions-and-loops
  annotations:
    tekton.dev/output_artifacts: '{"add-numbers": [{"key": "artifacts/$PIPELINERUN/add-numbers/Output.tgz",
      "name": "add-numbers-Output", "path": "/tmp/outputs/Output/data"}], "print-number":
      [{"key": "artifacts/$PIPELINERUN/print-number/Output.tgz", "name": "print-number-Output",
      "path": "/tmp/outputs/Output/data"}], "produce-numbers": [{"key": "artifacts/$PIPELINERUN/produce-numbers/Output.tgz",
      "name": "produce-numbers-Output", "path": "/tmp/outputs/Output/data"}]}'
    tekton.dev/input_artifacts: '{"print-number": [{"name": "add-numbers-Output",
      "parent_task": "add-numbers"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"add-numbers": [["Output", "$(results.Output.path)"]],
      "notify-failure": [], "notify-success": [], "print-number": [["Output", "$(results.Output.path)"]],
      "produce-numbers": [["Output", "$(results.Output.path)"]]}'
    sidecar.istio.io/inject: "false"
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "3", "name": "n",
      "optional": true, "type": "Integer"}, {"default": "20", "name": "threshold",
      "optional": true, "type": "Integer"}], "name": "conditions-and-loops"}'
    tekton.dev/resource_templates: '[{"apiVersion": "custom.tekton.dev/v1alpha1",
      "kind": "PipelineLoop", "metadata": {"name": "conditions-and-loops-for-loop-1"},
      "spec": {"iterateParam": "produce-numbers-Output-loop-item", "pipelineSpec":
      {"params": [{"name": "produce-numbers-Output-loop-item", "type": "string"},
      {"name": "threshold", "type": "string"}], "tasks": [{"name": "add-numbers",
      "params": [{"name": "produce-numbers-Output-loop-item", "value": "$(params.produce-numbers-Output-loop-item)"}],
      "taskSpec": {"metadata": {"annotations": {"pipelines.kubeflow.org/component_spec_digest":
      "{\"name\": \"Add numbers\", \"outputs\": [{\"name\": \"Output\", \"type\":
      \"Integer\"}], \"version\": \"Add numbers@sha256=4a4bea3d4b7966f0ce3cdef5ad4d997a283ef6a895959791e037cf391732bb04\"}",
      "tekton.dev/template": ""}, "labels": {"pipelines.kubeflow.org/cache_enabled":
      "true", "pipelines.kubeflow.org/generation": "", "pipelines.kubeflow.org/pipelinename":
      ""}}, "params": [{"name": "produce-numbers-Output-loop-item", "type": "string"}],
      "results": [{"description": "/tmp/outputs/Output/data", "name": "Output", "type":
      "string"}], "steps": [{"args": ["--a", "$(inputs.params.produce-numbers-Output-loop-item)",
      "--b", "10", "----output-paths", "$(results.Output.path)"], "command": ["sh",
      "-ec", "program_path=$(mktemp)\nprintf \"%s\" \"$0\" > \"$program_path\"\npython3
      -u \"$program_path\" \"$@\"\n", "def add_numbers(a, b):\n    print(a + b)\n    return
      a + b\n\ndef _serialize_int(int_value: int) -> str:\n    if isinstance(int_value,
      str):\n        return int_value\n    if not isinstance(int_value, int):\n        raise
      TypeError(''Value \"{}\" has type \"{}\" instead of int.''.format(\n            str(int_value),
      str(type(int_value))))\n    return str(int_value)\n\nimport argparse\n_parser
      = argparse.ArgumentParser(prog=''Add numbers'', description='''')\n_parser.add_argument(\"--a\",
      dest=\"a\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
      dest=\"b\", type=int, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
      dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
      = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add_numbers(**_parsed_args)\n\n_outputs
      = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
      os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
      OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
      "image": "python:3.7", "name": "main"}]}, "timeout": "525600m"}, {"name": "print-number",
      "params": [{"name": "add-numbers-Output", "value": "$(tasks.add-numbers.results.Output)"}],
      "taskSpec": {"metadata": {"annotations": {"pipelines.kubeflow.org/component_spec_digest":
      "{\"name\": \"Print number\", \"outputs\": [{\"name\": \"Output\", \"type\":
      \"Integer\"}], \"version\": \"Print number@sha256=7ad81f52d1b478fd168c0234b16a496672bdfc43da71a71fcdc5d688791f04cf\"}",
      "tekton.dev/template": ""}, "labels": {"pipelines.kubeflow.org/cache_enabled":
      "true", "pipelines.kubeflow.org/generation": "", "pipelines.kubeflow.org/pipelinename":
      ""}}, "params": [{"name": "add-numbers-Output", "type": "string"}], "results":
      [{"description": "/tmp/outputs/Output/data", "name": "Output", "type": "string"}],
      "steps": [{"args": ["--a", "$(inputs.params.add-numbers-Output)", "----output-paths",
      "$(results.Output.path)"], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf
      \"%s\" \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
      print_number(a):\n    print(a)\n    return a\n\ndef _serialize_int(int_value:
      int) -> str:\n    if isinstance(int_value, str):\n        return int_value\n    if
      not isinstance(int_value, int):\n        raise TypeError(''Value \"{}\" has
      type \"{}\" instead of int.''.format(\n            str(int_value), str(type(int_value))))\n    return
      str(int_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Print
      number'', description='''')\n_parser.add_argument(\"--a\", dest=\"a\", type=int,
      required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
      dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
      = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = print_number(**_parsed_args)\n\n_outputs
      = [_outputs]\n\n_output_serializers = [\n    _serialize_int,\n\n]\n\nimport
      os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
      OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
      "image": "python:3.7", "name": "main"}]}, "timeout": "525600m"}, {"name": "notify-success",
      "taskSpec": {"metadata": {"annotations": {"pipelines.kubeflow.org/component_spec_digest":
      "{\"name\": \"Notify success\", \"outputs\": [], \"version\": \"Notify success@sha256=b32dbdd3dc06d69ac8358045345f65fc0610ccdf6e9927c447deb4634016028a\"}",
      "tekton.dev/template": ""}, "labels": {"pipelines.kubeflow.org/cache_enabled":
      "true", "pipelines.kubeflow.org/generation": "", "pipelines.kubeflow.org/pipelinename":
      ""}}, "steps": [{"command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
      \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def notify_success():\n    print(''SUCCESS!'')\n\nimport
      argparse\n_parser = argparse.ArgumentParser(prog=''Notify success'', description='''')\n_parsed_args
      = vars(_parser.parse_args())\n\n_outputs = notify_success(**_parsed_args)\n"],
      "image": "python:3.7", "name": "main"}]}, "timeout": "525600m", "when": [{"input":
      "$(tasks.condition-2.results.outcome)", "operator": "in", "values": ["true"]}]},
      {"name": "notify-failure", "taskSpec": {"metadata": {"annotations": {"pipelines.kubeflow.org/component_spec_digest":
      "{\"name\": \"Notify failure\", \"outputs\": [], \"version\": \"Notify failure@sha256=fa2f0190a19f2fa88c34a3805a4517a3f5d697e30491bec02fb3cf9504d909d7\"}",
      "tekton.dev/template": ""}, "labels": {"pipelines.kubeflow.org/cache_enabled":
      "true", "pipelines.kubeflow.org/generation": "", "pipelines.kubeflow.org/pipelinename":
      ""}}, "steps": [{"command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
      \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def notify_failure():\n    print(''FAILED!'')\n\nimport
      argparse\n_parser = argparse.ArgumentParser(prog=''Notify failure'', description='''')\n_parsed_args
      = vars(_parser.parse_args())\n\n_outputs = notify_failure(**_parsed_args)\n"],
      "image": "python:3.7", "name": "main"}]}, "timeout": "525600m", "when": [{"input":
      "$(tasks.condition-3.results.outcome)", "operator": "in", "values": ["true"]}]},
      {"name": "condition-2", "params": [{"name": "operand1", "value": "$(tasks.print-number.results.Output)"},
      {"name": "operand2", "value": "$(params.threshold)"}, {"name": "operator", "value":
      ">"}], "taskSpec": {"params": [{"name": "operand1", "type": "string"}, {"name":
      "operand2", "type": "string"}, {"name": "operator", "type": "string"}], "results":
      [{"description": "Conditional task outcome", "name": "outcome", "type": "string"}],
      "steps": [{"args": ["import sys\ninput1=str.rstrip(sys.argv[1])\ninput2=str.rstrip(sys.argv[2])\ntry:\n  input1=int(input1)\n  input2=int(input2)\nexcept:\n  input1=str(input1)\noutcome=\"true\"
      if (input1 $(inputs.params.operator) input2) else \"false\"\nf = open(\"/tekton/results/outcome\",
      \"w\")\nf.write(outcome)\nf.close()\n", "$(inputs.params.operand1)", "$(inputs.params.operand2)"],
      "command": ["sh", "-ec", "program_path=$(mktemp); printf \"%s\" \"$0\" > \"$program_path\";  python3
      -u \"$program_path\" \"$1\" \"$2\""], "image": "python:alpine3.6", "name": "main"}]}},
      {"name": "condition-3", "params": [{"name": "operand1", "value": "$(tasks.print-number.results.Output)"},
      {"name": "operand2", "value": "$(params.threshold)"}, {"name": "operator", "value":
      "<="}], "taskSpec": {"params": [{"name": "operand1", "type": "string"}, {"name":
      "operand2", "type": "string"}, {"name": "operator", "type": "string"}], "results":
      [{"description": "Conditional task outcome", "name": "outcome", "type": "string"}],
      "steps": [{"args": ["import sys\ninput1=str.rstrip(sys.argv[1])\ninput2=str.rstrip(sys.argv[2])\ntry:\n  input1=int(input1)\n  input2=int(input2)\nexcept:\n  input1=str(input1)\noutcome=\"true\"
      if (input1 $(inputs.params.operator) input2) else \"false\"\nf = open(\"/tekton/results/outcome\",
      \"w\")\nf.write(outcome)\nf.close()\n", "$(inputs.params.operand1)", "$(inputs.params.operand2)"],
      "command": ["sh", "-ec", "program_path=$(mktemp); printf \"%s\" \"$0\" > \"$program_path\";  python3
      -u \"$program_path\" \"$1\" \"$2\""], "image": "python:alpine3.6", "name": "main"}]}}]}}}]'
spec:
  params:
  - name: "n"
    value: '3'
  - name: threshold
    value: '20'
  pipelineSpec:
    params:
    - name: "n"
      default: '3'
    - name: threshold
      default: '20'
    tasks:
    - name: produce-numbers
      params:
      - name: "n"
        value: $(params.n)
      taskSpec:
        steps:
        - name: main
          args:
          - --n
          - $(inputs.params.n)
          - '----output-paths'
          - $(results.Output.path)
          command:
          - sh
          - -ec
          - |
            program_path=$(mktemp)
            printf "%s" "$0" > "$program_path"
            python3 -u "$program_path" "$@"
          - |
            def produce_numbers(n):
                import random
                rl = random.sample(range(0, 1000), n)
                print(rl)
                return rl

            def _serialize_json(obj) -> str:
                if isinstance(obj, str):
                    return obj
                import json

                def default_serializer(obj):
                    if hasattr(obj, 'to_struct'):
                        return obj.to_struct()
                    else:
                        raise TypeError(
                            "Object of type '%s' is not JSON serializable and does not have .to_struct() method."
                            % obj.__class__.__name__)

                return json.dumps(obj, default=default_serializer, sort_keys=True)

            import argparse
            _parser = argparse.ArgumentParser(prog='Produce numbers', description='')
            _parser.add_argument("--n", dest="n", type=int, required=True, default=argparse.SUPPRESS)
            _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
            _parsed_args = vars(_parser.parse_args())
            _output_files = _parsed_args.pop("_output_paths", [])

            _outputs = produce_numbers(**_parsed_args)

            _outputs = [_outputs]

            _output_serializers = [
                _serialize_json,

            ]

            import os
            for idx, output_file in enumerate(_output_files):
                try:
                    os.makedirs(os.path.dirname(output_file))
                except OSError:
                    pass
                with open(output_file, 'w') as f:
                    f.write(_output_serializers[idx](_outputs[idx]))
          image: python:3.7
        params:
        - name: "n"
        results:
        - name: Output
          type: string
          description: /tmp/outputs/Output/data
        metadata:
          labels:
            pipelines.kubeflow.org/pipelinename: ''
            pipelines.kubeflow.org/generation: ''
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Produce numbers",
              "outputs": [{"name": "Output", "type": "JsonArray"}], "version": "Produce
              numbers@sha256=34359d28ebb62227d7f51440c862c7ed2929e91beeabe1e78c8687ccba38265e"}'
            tekton.dev/template: ''
      timeout: 525600m
    - runAfter:
      - produce-numbers
      name: conditions-and-loops-for-loop-1
      taskRef:
        apiVersion: custom.tekton.dev/v1alpha1
        kind: PipelineLoop
        name: conditions-and-loops-for-loop-1
      params:
      - name: produce-numbers-Output-loop-item
        value: $(tasks.produce-numbers.results.Output)
      - name: threshold
        value: $(params.threshold)
  timeout: 525600m
