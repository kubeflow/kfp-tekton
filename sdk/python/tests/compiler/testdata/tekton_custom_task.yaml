# Copyright 2021-2023 kubeflow.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: tekton-custom-task-on-kubeflow-pipeline
  annotations:
    tekton.dev/output_artifacts: '{"flip-coin": [{"key": "artifacts/$PIPELINERUN/flip-coin/output_result.tgz",
      "name": "flip-coin-output_result", "path": "/tmp/outputs/output_result/data"}],
      "flip-coin-2": [{"key": "artifacts/$PIPELINERUN/flip-coin-2/output_result.tgz",
      "name": "flip-coin-2-output_result", "path": "/tmp/outputs/output_result/data"}]}'
    tekton.dev/input_artifacts: '{"print": [{"name": "condition-cel-outcome", "parent_task":
      "condition-cel"}]}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"flip-coin": [["output_result", "$(results.output-result.path)"]],
      "flip-coin-2": [["output_result", "$(results.output-result.path)"]], "print":
      []}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"description": "Shows how to use Tekton
      custom task with KFP", "name": "tekton-custom-task-on-kubeflow-pipeline"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  pipelineSpec:
    tasks:
    - name: flip-coin
      taskSpec:
        steps:
        - name: main
          args:
          - |
            python -c "import random; result = 'heads' if random.randint(0,1) == 0           else 'tails'; print(result)" | tee $0
          - $(results.output-result.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
        results:
        - name: output-result
          type: string
          description: /tmp/outputs/output_result/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "flip-coin", "outputs":
              [{"name": "output_result", "type": "String"}], "version": "flip-coin@sha256=742164cb310e6ee3f29ee5491bdded83811f56531a8d045bb6052aac51f035fc"}'
    - name: flip-coin-2
      taskSpec:
        steps:
        - name: main
          args:
          - |
            python -c "import random; result = 'heads' if random.randint(0,1) == 0           else 'tails'; print(result)" | tee $0
          - $(results.output-result.path)
          command:
          - sh
          - -c
          image: python:alpine3.6
        results:
        - name: output-result
          type: string
          description: /tmp/outputs/output_result/data
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "flip-coin", "outputs":
              [{"name": "output_result", "type": "String"}], "version": "flip-coin@sha256=742164cb310e6ee3f29ee5491bdded83811f56531a8d045bb6052aac51f035fc"}'
    - name: condition-cel
      params:
      - name: outcome
        value: '''$(tasks.flip-coin.results.output-result)'' == ''$(tasks.flip-coin-2.results.output-result)'''
      taskRef:
        name: cel_condition
        apiVersion: cel.tekton.dev/v1alpha1
        kind: CEL
    - name: print
      params:
      - name: condition-cel-outcome
        value: $(tasks.condition-cel.results.outcome)
      taskSpec:
        steps:
        - name: main
          command:
          - echo
          - Condition output is $(inputs.params.condition-cel-outcome)
          image: alpine:3.6
        params:
        - name: condition-cel-outcome
        metadata:
          labels:
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            pipelines.kubeflow.org/component_spec_digest: '{"name": "print", "outputs":
              [], "version": "print@sha256=e5d74bd54bd5aaa77f1c40ad6346cae3fefcc749bea2f6d1561c09ca1f0fe867"}'
