apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    pipelines.kubeflow.org/component_spec: '{"description": "Repeat the line specified
      number of times", "inputs": [{"name": "line", "type": "String"}, {"default":
      "10", "name": "count", "optional": true, "type": "Integer"}], "name": "Repeat
      line", "outputs": [{"name": "output_text", "type": "String"}]}'
  name: repeat-line
spec:
  steps:
  - args:
    - --line
    - Hello
    - --count
    - '5000'
    - --output-text
    - $(workspaces.repeat-line.path)/repeat-line-output-text
    command:
    - python3
    - -u
    - -c
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef repeat_line(line , output_text_path , count  = 10):\n    '''Repeat the\
      \ line specified number of times'''\n    with open(output_text_path, 'w') as\
      \ writer:\n        for i in range(count):\n            writer.write(line + '\\\
      n')\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Repeat line',\
      \ description='Repeat the line specified number of times')\n_parser.add_argument(\"\
      --line\", dest=\"line\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--count\", dest=\"count\", type=int, required=False,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-text\", dest=\"\
      output_text_path\", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
      _output_paths\", [])\n\n_outputs = repeat_line(**_parsed_args)\n\n_output_serializers\
      \ = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    image: tensorflow/tensorflow:1.13.2-py3
    name: main
  workspaces:
  - name: repeat-line
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    pipelines.kubeflow.org/component_spec: '{"description": "Print text", "inputs":
      [{"name": "text"}], "name": "Print text"}'
  name: print-text
spec:
  steps:
  - args:
    - --text
    - $(workspaces.print-text.path)/repeat-line-output-text
    command:
    - python3
    - -u
    - -c
    - "def print_text(text_path ): # The \"text\" input is untyped so that any data\
      \ can be printed\n    '''Print text'''\n    with open(text_path, 'r') as reader:\n\
      \        for line in reader:\n            print(line, end = '')\n\nimport argparse\n\
      _parser = argparse.ArgumentParser(prog='Print text', description='Print text')\n\
      _parser.add_argument(\"--text\", dest=\"text_path\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n_output_files\
      \ = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = print_text(**_parsed_args)\n\
      \n_output_serializers = [\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    image: tensorflow/tensorflow:1.13.2-py3
    name: main
  workspaces:
  - name: print-text
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  annotations:
    pipelines.kubeflow.org/pipeline_spec: '{"name": "Print repeating lines pipeline"}'
    sidecar.istio.io/inject: 'false'
  name: print-repeating-lines-pipeline
spec:
  tasks:
  - name: repeat-line
    taskRef:
      name: repeat-line
    workspaces:
    - name: repeat-line
      workspace: print-repeating-lines-pipeline
  - name: print-text
    runAfter:
    - repeat-line
    taskRef:
      name: print-text
    workspaces:
    - name: print-text
      workspace: print-repeating-lines-pipeline
  workspaces:
  - name: print-repeating-lines-pipeline
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotation:
    tekton.dev/input_artifacts: '{}'
    tekton.dev/output_artifacts: '{}'
  name: print-repeating-lines-pipeline-run
spec:
  pipelineRef:
    name: print-repeating-lines-pipeline
  workspaces:
  - name: print-repeating-lines-pipeline
    persistentVolumeClaim:
      claimName: print-repeating-lines-pipeline-run
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: print-repeating-lines-pipeline-run
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
  volumeMode: Filesystem
